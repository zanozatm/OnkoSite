!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(C,t){"use strict";var e=[],E=C.document,i=Object.getPrototypeOf,a=e.slice,g=e.concat,l=e.push,r=e.indexOf,n={},o=n.toString,m=n.hasOwnProperty,s=m.toString,c=s.call(Object),v={},y=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},_=function(t){return null!=t&&t===t.window},u={type:!0,src:!0,noModule:!0};function w(t,e,n){var i,r=(e=e||E).createElement("script");if(r.text=t,n)for(i in u)n[i]&&(r[i]=n[i]);e.head.appendChild(r).parentNode.removeChild(r)}function b(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?n[o.call(t)]||"object":typeof t}var h="3.3.1",$=function(t,e){return new $.fn.init(t,e)},d=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function f(t){var e=!!t&&"length"in t&&t.length,n=b(t);return!y(t)&&!_(t)&&("array"===n||0===e||"number"==typeof e&&0<e&&e-1 in t)}$.fn=$.prototype={jquery:h,constructor:$,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=$.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return $.each(this,t)},map:function(n){return this.pushStack($.map(this,function(t,e){return n.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(0<=n&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:e.sort,splice:e.splice},$.extend=$.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||y(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],s!==(i=t[e])&&(c&&i&&($.isPlainObject(i)||(r=Array.isArray(i)))?(o=r?(r=!1,n&&Array.isArray(n)?n:[]):n&&$.isPlainObject(n)?n:{},s[e]=$.extend(c,o,i)):void 0!==i&&(s[e]=i));return s},$.extend({expando:"jQuery"+(h+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==o.call(t))&&(!(e=i(t))||"function"==typeof(n=m.call(e,"constructor")&&e.constructor)&&s.call(n)===c)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t){w(t)},each:function(t,e){var n,i=0;if(f(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(d,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(f(Object(t))?$.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:r.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,o=t.length,s=!n;r<o;r++)!e(t[r],r)!==s&&i.push(t[r]);return i},map:function(t,e,n){var i,r,o=0,s=[];if(f(t))for(i=t.length;o<i;o++)null!=(r=e(t[o],o,n))&&s.push(r);else for(o in t)null!=(r=e(t[o],o,n))&&s.push(r);return g.apply([],s)},guid:1,support:v}),"function"==typeof Symbol&&($.fn[Symbol.iterator]=e[Symbol.iterator]),$.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){n["[object "+e+"]"]=e.toLowerCase()});var p=function(n){var t,f,w,o,r,p,h,g,b,l,c,x,C,s,E,m,a,u,v,$="sizzle"+1*new Date,y=n.document,T=0,i=0,d=st(),_=st(),D=st(),S=function(t,e){return t===e&&(c=!0),0},A={}.hasOwnProperty,e=[],k=e.pop,N=e.push,I=e.push,O=e.slice,j=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",M="\\["+L+"*("+H+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+L+"*\\]",R=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",W=new RegExp(L+"+","g"),U=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),q=new RegExp("^"+L+"*,"+L+"*"),z=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),F=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),B=new RegExp(R),Q=new RegExp("^"+H+"$"),K={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},V=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,X=/^[^{]+\{\s*\[native \w/,G=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/[+~]/,J=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),tt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,nt=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},it=function(){x()},rt=yt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{I.apply(e=O.call(y.childNodes),y.childNodes),e[y.childNodes.length].nodeType}catch(t){I={apply:e.length?function(t,e){N.apply(t,O.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function ot(t,e,n,i){var r,o,s,a,l,c,u,h=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!i&&((e?e.ownerDocument||e:y)!==C&&x(e),e=e||C,E)){if(11!==d&&(l=G.exec(t)))if(r=l[1]){if(9===d){if(!(s=e.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(h&&(s=h.getElementById(r))&&v(e,s)&&s.id===r)return n.push(s),n}else{if(l[2])return I.apply(n,e.getElementsByTagName(t)),n;if((r=l[3])&&f.getElementsByClassName&&e.getElementsByClassName)return I.apply(n,e.getElementsByClassName(r)),n}if(f.qsa&&!D[t+" "]&&(!m||!m.test(t))){if(1!==d)h=e,u=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(et,nt):e.setAttribute("id",a=$),o=(c=p(t)).length;o--;)c[o]="#"+a+" "+vt(c[o]);u=c.join(","),h=Z.test(t)&&gt(e.parentNode)||e}if(u)try{return I.apply(n,h.querySelectorAll(u)),n}catch(t){}finally{a===$&&e.removeAttribute("id")}}}return g(t.replace(U,"$1"),e,n,i)}function st(){var i=[];return function t(e,n){return i.push(e+" ")>w.cacheLength&&delete t[i.shift()],t[e+" "]=n}}function at(t){return t[$]=!0,t}function lt(t){var e=C.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ct(t,e){for(var n=t.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=e}function ut(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ht(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function dt(n){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===n}}function ft(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&rt(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function pt(s){return at(function(o){return o=+o,at(function(t,e){for(var n,i=s([],t.length,o),r=i.length;r--;)t[n=i[r]]&&(t[n]=!(e[n]=t[n]))})})}function gt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in f=ot.support={},r=ot.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},x=ot.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:y;return i!==C&&9===i.nodeType&&i.documentElement&&(s=(C=i).documentElement,E=!r(C),y!==C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",it,!1):n.attachEvent&&n.attachEvent("onunload",it)),f.attributes=lt(function(t){return t.className="i",!t.getAttribute("className")}),f.getElementsByTagName=lt(function(t){return t.appendChild(C.createComment("")),!t.getElementsByTagName("*").length}),f.getElementsByClassName=X.test(C.getElementsByClassName),f.getById=lt(function(t){return s.appendChild(t).id=$,!C.getElementsByName||!C.getElementsByName($).length}),f.getById?(w.filter.ID=function(t){var e=t.replace(J,tt);return function(t){return t.getAttribute("id")===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&E){var n=e.getElementById(t);return n?[n]:[]}}):(w.filter.ID=function(t){var n=t.replace(J,tt);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===n}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&E){var n,i,r,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(r=e.getElementsByName(t),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),w.find.TAG=f.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):f.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"!==t)return o;for(;n=o[r++];)1===n.nodeType&&i.push(n);return i},w.find.CLASS=f.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&E)return e.getElementsByClassName(t)},a=[],m=[],(f.qsa=X.test(C.querySelectorAll))&&(lt(function(t){s.appendChild(t).innerHTML="<a id='"+$+"'></a><select id='"+$+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+L+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+L+"*(?:value|"+P+")"),t.querySelectorAll("[id~="+$+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+$+"+*").length||m.push(".#.+[+~]")}),lt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=C.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+L+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),s.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(f.matchesSelector=X.test(u=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&lt(function(t){f.disconnectedMatch=u.call(t,"*"),u.call(t,"[s!='']:x"),a.push("!=",R)}),m=m.length&&new RegExp(m.join("|")),a=a.length&&new RegExp(a.join("|")),e=X.test(s.compareDocumentPosition),v=e||X.test(s.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},S=e?function(t,e){if(t===e)return c=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!f.sortDetached&&e.compareDocumentPosition(t)===n?t===C||t.ownerDocument===y&&v(y,t)?-1:e===C||e.ownerDocument===y&&v(y,e)?1:l?j(l,t)-j(l,e):0:4&n?-1:1)}:function(t,e){if(t===e)return c=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,s=[t],a=[e];if(!r||!o)return t===C?-1:e===C?1:r?-1:o?1:l?j(l,t)-j(l,e):0;if(r===o)return ut(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ut(s[i],a[i]):s[i]===y?-1:a[i]===y?1:0}),C},ot.matches=function(t,e){return ot(t,null,null,e)},ot.matchesSelector=function(t,e){if((t.ownerDocument||t)!==C&&x(t),e=e.replace(F,"='$1']"),f.matchesSelector&&E&&!D[e+" "]&&(!a||!a.test(e))&&(!m||!m.test(e)))try{var n=u.call(t,e);if(n||f.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return 0<ot(e,C,null,[t]).length},ot.contains=function(t,e){return(t.ownerDocument||t)!==C&&x(t),v(t,e)},ot.attr=function(t,e){(t.ownerDocument||t)!==C&&x(t);var n=w.attrHandle[e.toLowerCase()],i=n&&A.call(w.attrHandle,e.toLowerCase())?n(t,e,!E):void 0;return void 0!==i?i:f.attributes||!E?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},ot.escape=function(t){return(t+"").replace(et,nt)},ot.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},ot.uniqueSort=function(t){var e,n=[],i=0,r=0;if(c=!f.detectDuplicates,l=!f.sortStable&&t.slice(0),t.sort(S),c){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return l=null,t},o=ot.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=o(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=o(e);return n},(w=ot.selectors={cacheLength:50,createPseudo:at,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(J,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(J,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||ot.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&ot.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&B.test(n)&&(e=p(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(J,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=d[t+" "];return e||(e=new RegExp("(^|"+L+")"+t+"("+L+"|$)"))&&d(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(n,i,r){return function(t){var e=ot.attr(t,n);return null==e?"!="===i:!i||(e+="","="===i?e===r:"!="===i?e!==r:"^="===i?r&&0===e.indexOf(r):"*="===i?r&&-1<e.indexOf(r):"$="===i?r&&e.slice(-r.length)===r:"~="===i?-1<(" "+e.replace(W," ")+" ").indexOf(r):"|="===i&&(e===r||e.slice(0,r.length+1)===r+"-"))}},CHILD:function(p,t,e,g,m){var v="nth"!==p.slice(0,3),y="last"!==p.slice(-4),_="of-type"===t;return 1===g&&0===m?function(t){return!!t.parentNode}:function(t,e,n){var i,r,o,s,a,l,c=v!==y?"nextSibling":"previousSibling",u=t.parentNode,h=_&&t.nodeName.toLowerCase(),d=!n&&!_,f=!1;if(u){if(v){for(;c;){for(s=t;s=s[c];)if(_?s.nodeName.toLowerCase()===h:1===s.nodeType)return!1;l=c="only"===p&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&d){for(f=(a=(i=(r=(o=(s=u)[$]||(s[$]={}))[s.uniqueID]||(o[s.uniqueID]={}))[p]||[])[0]===T&&i[1])&&i[2],s=a&&u.childNodes[a];s=++a&&s&&s[c]||(f=a=0)||l.pop();)if(1===s.nodeType&&++f&&s===t){r[p]=[T,a,f];break}}else if(d&&(f=a=(i=(r=(o=(s=t)[$]||(s[$]={}))[s.uniqueID]||(o[s.uniqueID]={}))[p]||[])[0]===T&&i[1]),!1===f)for(;(s=++a&&s&&s[c]||(f=a=0)||l.pop())&&((_?s.nodeName.toLowerCase()!==h:1!==s.nodeType)||!++f||(d&&((r=(o=s[$]||(s[$]={}))[s.uniqueID]||(o[s.uniqueID]={}))[p]=[T,f]),s!==t)););return(f-=m)===g||f%g==0&&0<=f/g}}},PSEUDO:function(t,o){var e,s=w.pseudos[t]||w.setFilters[t.toLowerCase()]||ot.error("unsupported pseudo: "+t);return s[$]?s(o):1<s.length?(e=[t,t,"",o],w.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,e){for(var n,i=s(t,o),r=i.length;r--;)t[n=j(t,i[r])]=!(e[n]=i[r])}):function(t){return s(t,0,e)}):s}},pseudos:{not:at(function(t){var i=[],r=[],a=h(t.replace(U,"$1"));return a[$]?at(function(t,e,n,i){for(var r,o=a(t,null,i,[]),s=t.length;s--;)(r=o[s])&&(t[s]=!(e[s]=r))}):function(t,e,n){return i[0]=t,a(i,null,n,r),i[0]=null,!r.pop()}}),has:at(function(e){return function(t){return 0<ot(e,t).length}}),contains:at(function(e){return e=e.replace(J,tt),function(t){return-1<(t.textContent||t.innerText||o(t)).indexOf(e)}}),lang:at(function(n){return Q.test(n||"")||ot.error("unsupported lang: "+n),n=n.replace(J,tt).toLowerCase(),function(t){var e;do{if(e=E?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===n||0===e.indexOf(n+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===s},focus:function(t){return t===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:ft(!1),disabled:ft(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return Y.test(t.nodeName)},input:function(t){return V.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:pt(function(){return[0]}),last:pt(function(t,e){return[e-1]}),eq:pt(function(t,e,n){return[n<0?n+e:n]}),even:pt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:pt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:pt(function(t,e,n){for(var i=n<0?n+e:n;0<=--i;)t.push(i);return t}),gt:pt(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[t]=ht(t);for(t in{submit:!0,reset:!0})w.pseudos[t]=dt(t);function mt(){}function vt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function yt(a,t,e){var l=t.dir,c=t.next,u=c||l,h=e&&"parentNode"===u,d=i++;return t.first?function(t,e,n){for(;t=t[l];)if(1===t.nodeType||h)return a(t,e,n);return!1}:function(t,e,n){var i,r,o,s=[T,d];if(n){for(;t=t[l];)if((1===t.nodeType||h)&&a(t,e,n))return!0}else for(;t=t[l];)if(1===t.nodeType||h)if(r=(o=t[$]||(t[$]={}))[t.uniqueID]||(o[t.uniqueID]={}),c&&c===t.nodeName.toLowerCase())t=t[l]||t;else{if((i=r[u])&&i[0]===T&&i[1]===d)return s[2]=i[2];if((r[u]=s)[2]=a(t,e,n))return!0}return!1}}function _t(r){return 1<r.length?function(t,e,n){for(var i=r.length;i--;)if(!r[i](t,e,n))return!1;return!0}:r[0]}function wt(t,e,n,i,r){for(var o,s=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(n&&!n(o,i,r)||(s.push(o),c&&e.push(a)));return s}function bt(f,p,g,m,v,t){return m&&!m[$]&&(m=bt(m)),v&&!v[$]&&(v=bt(v,t)),at(function(t,e,n,i){var r,o,s,a=[],l=[],c=e.length,u=t||function(t,e,n){for(var i=0,r=e.length;i<r;i++)ot(t,e[i],n);return n}(p||"*",n.nodeType?[n]:n,[]),h=!f||!t&&p?u:wt(u,a,f,n,i),d=g?v||(t?f:c||m)?[]:e:h;if(g&&g(h,d,n,i),m)for(r=wt(d,l),m(r,[],n,i),o=r.length;o--;)(s=r[o])&&(d[l[o]]=!(h[l[o]]=s));if(t){if(v||f){if(v){for(r=[],o=d.length;o--;)(s=d[o])&&r.push(h[o]=s);v(null,d=[],r,i)}for(o=d.length;o--;)(s=d[o])&&-1<(r=v?j(t,s):a[o])&&(t[r]=!(e[r]=s))}}else d=wt(d===e?d.splice(c,d.length):d),v?v(null,e,d,i):I.apply(e,d)})}function xt(t){for(var r,e,n,i=t.length,o=w.relative[t[0].type],s=o||w.relative[" "],a=o?1:0,l=yt(function(t){return t===r},s,!0),c=yt(function(t){return-1<j(r,t)},s,!0),u=[function(t,e,n){var i=!o&&(n||e!==b)||((r=e).nodeType?l(t,e,n):c(t,e,n));return r=null,i}];a<i;a++)if(e=w.relative[t[a].type])u=[yt(_t(u),e)];else{if((e=w.filter[t[a].type].apply(null,t[a].matches))[$]){for(n=++a;n<i&&!w.relative[t[n].type];n++);return bt(1<a&&_t(u),1<a&&vt(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(U,"$1"),e,a<n&&xt(t.slice(a,n)),n<i&&xt(t=t.slice(n)),n<i&&vt(t))}u.push(e)}return _t(u)}return mt.prototype=w.filters=w.pseudos,w.setFilters=new mt,p=ot.tokenize=function(t,e){var n,i,r,o,s,a,l,c=_[t+" "];if(c)return e?0:c.slice(0);for(s=t,a=[],l=w.preFilter;s;){for(o in n&&!(i=q.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(r=[])),n=!1,(i=z.exec(s))&&(n=i.shift(),r.push({value:n,type:i[0].replace(U," ")}),s=s.slice(n.length)),w.filter)!(i=K[o].exec(s))||l[o]&&!(i=l[o](i))||(n=i.shift(),r.push({value:n,type:o,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?ot.error(t):_(t,a).slice(0)},h=ot.compile=function(t,e){var n,m,v,y,_,i,r=[],o=[],s=D[t+" "];if(!s){for(e||(e=p(t)),n=e.length;n--;)(s=xt(e[n]))[$]?r.push(s):o.push(s);(s=D(t,(m=o,y=0<(v=r).length,_=0<m.length,i=function(t,e,n,i,r){var o,s,a,l=0,c="0",u=t&&[],h=[],d=b,f=t||_&&w.find.TAG("*",r),p=T+=null==d?1:Math.random()||.1,g=f.length;for(r&&(b=e===C||e||r);c!==g&&null!=(o=f[c]);c++){if(_&&o){for(s=0,e||o.ownerDocument===C||(x(o),n=!E);a=m[s++];)if(a(o,e||C,n)){i.push(o);break}r&&(T=p)}y&&((o=!a&&o)&&l--,t&&u.push(o))}if(l+=c,y&&c!==l){for(s=0;a=v[s++];)a(u,h,e,n);if(t){if(0<l)for(;c--;)u[c]||h[c]||(h[c]=k.call(i));h=wt(h)}I.apply(i,h),r&&!t&&0<h.length&&1<l+v.length&&ot.uniqueSort(i)}return r&&(T=p,b=d),u},y?at(i):i))).selector=t}return s},g=ot.select=function(t,e,n,i){var r,o,s,a,l,c="function"==typeof t&&t,u=!i&&p(t=c.selector||t);if(n=n||[],1===u.length){if(2<(o=u[0]=u[0].slice(0)).length&&"ID"===(s=o[0]).type&&9===e.nodeType&&E&&w.relative[o[1].type]){if(!(e=(w.find.ID(s.matches[0].replace(J,tt),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=K.needsContext.test(t)?0:o.length;r--&&(s=o[r],!w.relative[a=s.type]);)if((l=w.find[a])&&(i=l(s.matches[0].replace(J,tt),Z.test(o[0].type)&&gt(e.parentNode)||e))){if(o.splice(r,1),!(t=i.length&&vt(o)))return I.apply(n,i),n;break}}return(c||h(t,u))(i,e,!E,n,!e||Z.test(t)&&gt(e.parentNode)||e),n},f.sortStable=$.split("").sort(S).join("")===$,f.detectDuplicates=!!c,x(),f.sortDetached=lt(function(t){return 1&t.compareDocumentPosition(C.createElement("fieldset"))}),lt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ct("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),f.attributes&&lt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ct("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),lt(function(t){return null==t.getAttribute("disabled")})||ct(P,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),ot}(C);$.find=p,$.expr=p.selectors,$.expr[":"]=$.expr.pseudos,$.uniqueSort=$.unique=p.uniqueSort,$.text=p.getText,$.isXMLDoc=p.isXML,$.contains=p.contains,$.escapeSelector=p.escape;var x=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&$(t).is(n))break;i.push(t)}return i},T=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},D=$.expr.match.needsContext;function S(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function k(t,n,i){return y(n)?$.grep(t,function(t,e){return!!n.call(t,e,t)!==i}):n.nodeType?$.grep(t,function(t){return t===n!==i}):"string"!=typeof n?$.grep(t,function(t){return-1<r.call(n,t)!==i}):$.filter(n,t,i)}$.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?$.find.matchesSelector(i,t)?[i]:[]:$.find.matches(t,$.grep(e,function(t){return 1===t.nodeType}))},$.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack($(t).filter(function(){for(e=0;e<i;e++)if($.contains(r[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)$.find(t,r[e],n);return 1<i?$.uniqueSort(n):n},filter:function(t){return this.pushStack(k(this,t||[],!1))},not:function(t){return this.pushStack(k(this,t||[],!0))},is:function(t){return!!k(this,"string"==typeof t&&D.test(t)?$(t):t||[],!1).length}});var N,I=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;($.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||N,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):y(t)?void 0!==n.ready?n.ready(t):t($):$.makeArray(t,this);if(!(i="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:I.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof $?e[0]:e,$.merge(this,$.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:E,!0)),A.test(i[1])&&$.isPlainObject(e))for(i in e)y(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(r=E.getElementById(i[2]))&&(this[0]=r,this.length=1),this}).prototype=$.fn,N=$(E);var O=/^(?:parents|prev(?:Until|All))/,j={children:!0,contents:!0,next:!0,prev:!0};function P(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}$.fn.extend({has:function(t){var e=$(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if($.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,r=this.length,o=[],s="string"!=typeof t&&$(t);if(!D.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&$.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(1<o.length?$.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?r.call($(t),this[0]):r.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack($.uniqueSort($.merge(this.get(),$(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),$.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return x(t,"parentNode")},parentsUntil:function(t,e,n){return x(t,"parentNode",n)},next:function(t){return P(t,"nextSibling")},prev:function(t){return P(t,"previousSibling")},nextAll:function(t){return x(t,"nextSibling")},prevAll:function(t){return x(t,"previousSibling")},nextUntil:function(t,e,n){return x(t,"nextSibling",n)},prevUntil:function(t,e,n){return x(t,"previousSibling",n)},siblings:function(t){return T((t.parentNode||{}).firstChild,t)},children:function(t){return T(t.firstChild)},contents:function(t){return S(t,"iframe")?t.contentDocument:(S(t,"template")&&(t=t.content||t),$.merge([],t.childNodes))}},function(i,r){$.fn[i]=function(t,e){var n=$.map(this,r,t);return"Until"!==i.slice(-5)&&(e=t),e&&"string"==typeof e&&(n=$.filter(e,n)),1<this.length&&(j[i]||$.uniqueSort(n),O.test(i)&&n.reverse()),this.pushStack(n)}});var L=/[^\x20\t\r\n\f]+/g;function H(t){return t}function M(t){throw t}function R(t,e,n,i){var r;try{t&&y(r=t.promise)?r.call(t).done(e).fail(n):t&&y(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}$.Callbacks=function(i){var t,n;i="string"==typeof i?(t=i,n={},$.each(t.match(L)||[],function(t,e){n[e]=!0}),n):$.extend({},i);var r,e,o,s,a=[],l=[],c=-1,u=function(){for(s=s||i.once,o=r=!0;l.length;c=-1)for(e=l.shift();++c<a.length;)!1===a[c].apply(e[0],e[1])&&i.stopOnFalse&&(c=a.length,e=!1);i.memory||(e=!1),r=!1,s&&(a=e?[]:"")},h={add:function(){return a&&(e&&!r&&(c=a.length-1,l.push(e)),function n(t){$.each(t,function(t,e){y(e)?i.unique&&h.has(e)||a.push(e):e&&e.length&&"string"!==b(e)&&n(e)})}(arguments),e&&!r&&u()),this},remove:function(){return $.each(arguments,function(t,e){for(var n;-1<(n=$.inArray(e,a,n));)a.splice(n,1),n<=c&&c--}),this},has:function(t){return t?-1<$.inArray(t,a):0<a.length},empty:function(){return a&&(a=[]),this},disable:function(){return s=l=[],a=e="",this},disabled:function(){return!a},lock:function(){return s=l=[],e||r||(a=e=""),this},locked:function(){return!!s},fireWith:function(t,e){return s||(e=[t,(e=e||[]).slice?e.slice():e],l.push(e),r||u()),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!o}};return h},$.extend({Deferred:function(t){var o=[["notify","progress",$.Callbacks("memory"),$.Callbacks("memory"),2],["resolve","done",$.Callbacks("once memory"),$.Callbacks("once memory"),0,"resolved"],["reject","fail",$.Callbacks("once memory"),$.Callbacks("once memory"),1,"rejected"]],r="pending",s={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return s.then(null,t)},pipe:function(){var r=arguments;return $.Deferred(function(i){$.each(o,function(t,e){var n=y(r[e[4]])&&r[e[4]];a[e[1]](function(){var t=n&&n.apply(this,arguments);t&&y(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[e[0]+"With"](this,n?[t]:arguments)})}),r=null}).promise()},then:function(e,n,i){var l=0;function c(r,o,s,a){return function(){var n=this,i=arguments,t=function(){var t,e;if(!(r<l)){if((t=s.apply(n,i))===o.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,y(e)?a?e.call(t,c(l,o,H,a),c(l,o,M,a)):(l++,e.call(t,c(l,o,H,a),c(l,o,M,a),c(l,o,H,o.notifyWith))):(s!==H&&(n=void 0,i=[t]),(a||o.resolveWith)(n,i))}},e=a?t:function(){try{t()}catch(t){$.Deferred.exceptionHook&&$.Deferred.exceptionHook(t,e.stackTrace),l<=r+1&&(s!==M&&(n=void 0,i=[t]),o.rejectWith(n,i))}};r?e():($.Deferred.getStackHook&&(e.stackTrace=$.Deferred.getStackHook()),C.setTimeout(e))}}return $.Deferred(function(t){o[0][3].add(c(0,t,y(i)?i:H,t.notifyWith)),o[1][3].add(c(0,t,y(e)?e:H)),o[2][3].add(c(0,t,y(n)?n:M))}).promise()},promise:function(t){return null!=t?$.extend(t,s):s}},a={};return $.each(o,function(t,e){var n=e[2],i=e[5];s[e[1]]=n.add,i&&n.add(function(){r=i},o[3-t][2].disable,o[3-t][3].disable,o[0][2].lock,o[0][3].lock),n.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=n.fireWith}),s.promise(a),t&&t.call(a,a),a},when:function(t){var n=arguments.length,e=n,i=Array(e),r=a.call(arguments),o=$.Deferred(),s=function(e){return function(t){i[e]=this,r[e]=1<arguments.length?a.call(arguments):t,--n||o.resolveWith(i,r)}};if(n<=1&&(R(t,o.done(s(e)).resolve,o.reject,!n),"pending"===o.state()||y(r[e]&&r[e].then)))return o.then();for(;e--;)R(r[e],s(e),o.reject);return o.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;$.Deferred.exceptionHook=function(t,e){C.console&&C.console.warn&&t&&W.test(t.name)&&C.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},$.readyException=function(t){C.setTimeout(function(){throw t})};var U=$.Deferred();function q(){E.removeEventListener("DOMContentLoaded",q),C.removeEventListener("load",q),$.ready()}$.fn.ready=function(t){return U.then(t).catch(function(t){$.readyException(t)}),this},$.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--$.readyWait:$.isReady)||($.isReady=!0)!==t&&0<--$.readyWait||U.resolveWith(E,[$])}}),$.ready.then=U.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?C.setTimeout($.ready):(E.addEventListener("DOMContentLoaded",q),C.addEventListener("load",q));var z=function(t,e,n,i,r,o,s){var a=0,l=t.length,c=null==n;if("object"===b(n))for(a in r=!0,n)z(t,e,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,y(i)||(s=!0),c&&(e=s?(e.call(t,i),null):(c=e,function(t,e,n){return c.call($(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:c?e.call(t):l?e(t[0],n):o},F=/^-ms-/,B=/-([a-z])/g;function Q(t,e){return e.toUpperCase()}function K(t){return t.replace(F,"ms-").replace(B,Q)}var V=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Y(){this.expando=$.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(t){var e=t[this.expando];return e||(e={},V(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[K(e)]=n;else for(i in e)r[K(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][K(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(K):(e=K(e))in i?[e]:e.match(L)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||$.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!$.isEmptyObject(e)}};var X=new Y,G=new Y,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function tt(t,e,n){var i,r;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(J,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:Z.test(r)?JSON.parse(r):r)}catch(t){}G.set(t,e,n)}else n=void 0;return n}$.extend({hasData:function(t){return G.hasData(t)||X.hasData(t)},data:function(t,e,n){return G.access(t,e,n)},removeData:function(t,e){G.remove(t,e)},_data:function(t,e,n){return X.access(t,e,n)},_removeData:function(t,e){X.remove(t,e)}}),$.fn.extend({data:function(n,t){var e,i,r,o=this[0],s=o&&o.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){G.set(this,n)}):z(this,function(t){var e;if(o&&void 0===t)return void 0!==(e=G.get(o,n))?e:void 0!==(e=tt(o,n))?e:void 0;this.each(function(){G.set(this,n,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(r=G.get(o),1===o.nodeType&&!X.get(o,"hasDataAttrs"))){for(e=s.length;e--;)s[e]&&0===(i=s[e].name).indexOf("data-")&&(i=K(i.slice(5)),tt(o,i,r[i]));X.set(o,"hasDataAttrs",!0)}return r},removeData:function(t){return this.each(function(){G.remove(this,t)})}}),$.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=X.get(t,e),n&&(!i||Array.isArray(n)?i=X.access(t,e,$.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=$.queue(t,e),i=n.length,r=n.shift(),o=$._queueHooks(t,e);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,function(){$.dequeue(t,e)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return X.get(t,n)||X.access(t,n,{empty:$.Callbacks("once memory").add(function(){X.remove(t,[e+"queue",n])})})}}),$.fn.extend({queue:function(e,n){var t=2;return"string"!=typeof e&&(n=e,e="fx",t--),arguments.length<t?$.queue(this[0],e):void 0===n?this:this.each(function(){var t=$.queue(this,e,n);$._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&$.dequeue(this,e)})},dequeue:function(t){return this.each(function(){$.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=$.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=X.get(o[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var et=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,nt=new RegExp("^(?:([+-])=|)("+et+")([a-z%]*)$","i"),it=["Top","Right","Bottom","Left"],rt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&$.contains(t.ownerDocument,t)&&"none"===$.css(t,"display")},ot=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];for(o in r=n.apply(t,i||[]),e)t.style[o]=s[o];return r};function st(t,e,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return $.css(t,e,"")},l=a(),c=n&&n[3]||($.cssNumber[e]?"":"px"),u=($.cssNumber[e]||"px"!==c&&+l)&&nt.exec($.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)$.style(t,e,u+c),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),u/=o;u*=2,$.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var at={};function lt(t,e){for(var n,i,r,o,s,a,l,c=[],u=0,h=t.length;u<h;u++)(i=t[u]).style&&(n=i.style.display,e?("none"===n&&(c[u]=X.get(i,"display")||null,c[u]||(i.style.display="")),""===i.style.display&&rt(i)&&(c[u]=(l=s=o=void 0,s=(r=i).ownerDocument,a=r.nodeName,(l=at[a])||(o=s.body.appendChild(s.createElement(a)),l=$.css(o,"display"),o.parentNode.removeChild(o),"none"===l&&(l="block"),at[a]=l)))):"none"!==n&&(c[u]="none",X.set(i,"display",n)));for(u=0;u<h;u++)null!=c[u]&&(t[u].style.display=c[u]);return t}$.fn.extend({show:function(){return lt(this,!0)},hide:function(){return lt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){rt(this)?$(this).show():$(this).hide()})}});var ct=/^(?:checkbox|radio)$/i,ut=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ht=/^$|^module$|\/(?:java|ecma)script/i,dt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ft(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&S(t,e)?$.merge([t],n):n}function pt(t,e){for(var n=0,i=t.length;n<i;n++)X.set(t[n],"globalEval",!e||X.get(e[n],"globalEval"))}dt.optgroup=dt.option,dt.tbody=dt.tfoot=dt.colgroup=dt.caption=dt.thead,dt.th=dt.td;var gt,mt,vt=/<|&#?\w+;/;function yt(t,e,n,i,r){for(var o,s,a,l,c,u,h=e.createDocumentFragment(),d=[],f=0,p=t.length;f<p;f++)if((o=t[f])||0===o)if("object"===b(o))$.merge(d,o.nodeType?[o]:o);else if(vt.test(o)){for(s=s||h.appendChild(e.createElement("div")),a=(ut.exec(o)||["",""])[1].toLowerCase(),l=dt[a]||dt._default,s.innerHTML=l[1]+$.htmlPrefilter(o)+l[2],u=l[0];u--;)s=s.lastChild;$.merge(d,s.childNodes),(s=h.firstChild).textContent=""}else d.push(e.createTextNode(o));for(h.textContent="",f=0;o=d[f++];)if(i&&-1<$.inArray(o,i))r&&r.push(o);else if(c=$.contains(o.ownerDocument,o),s=ft(h.appendChild(o),"script"),c&&pt(s),n)for(u=0;o=s[u++];)ht.test(o.type||"")&&n.push(o);return h}gt=E.createDocumentFragment().appendChild(E.createElement("div")),(mt=E.createElement("input")).setAttribute("type","radio"),mt.setAttribute("checked","checked"),mt.setAttribute("name","t"),gt.appendChild(mt),v.checkClone=gt.cloneNode(!0).cloneNode(!0).lastChild.checked,gt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!gt.cloneNode(!0).lastChild.defaultValue;var _t=E.documentElement,wt=/^key/,bt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,xt=/^([^.]*)(?:\.(.+)|)/;function Ct(){return!0}function Et(){return!1}function $t(){try{return E.activeElement}catch(t){}}function Tt(t,e,n,i,r,o){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)Tt(t,a,n,i,e[a],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Et;else if(!r)return t;return 1===o&&(s=r,(r=function(t){return $().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=$.guid++)),t.each(function(){$.event.add(this,e,r,i,n)})}$.event={global:{},add:function(e,t,n,i,r){var o,s,a,l,c,u,h,d,f,p,g,m=X.get(e);if(m)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&$.find.matchesSelector(_t,r),n.guid||(n.guid=$.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(t){return void 0!==$&&$.event.triggered!==t.type?$.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(L)||[""]).length;c--;)f=g=(a=xt.exec(t[c])||[])[1],p=(a[2]||"").split(".").sort(),f&&(h=$.event.special[f]||{},f=(r?h.delegateType:h.bindType)||f,h=$.event.special[f]||{},u=$.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&$.expr.match.needsContext.test(r),namespace:p.join(".")},o),(d=l[f])||((d=l[f]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(e,i,p,s)||e.addEventListener&&e.addEventListener(f,s)),h.add&&(h.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,u):d.push(u),$.event.global[f]=!0)},remove:function(t,e,n,i,r){var o,s,a,l,c,u,h,d,f,p,g,m=X.hasData(t)&&X.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(L)||[""]).length;c--;)if(f=g=(a=xt.exec(e[c])||[])[1],p=(a[2]||"").split(".").sort(),f){for(h=$.event.special[f]||{},d=l[f=(i?h.delegateType:h.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)u=d[o],!r&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(o,1),u.selector&&d.delegateCount--,h.remove&&h.remove.call(t,u));s&&!d.length&&(h.teardown&&!1!==h.teardown.call(t,p,m.handle)||$.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)$.event.remove(t,f+e[c],n,i,!0);$.isEmptyObject(l)&&X.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,o,s,a=$.event.fix(t),l=new Array(arguments.length),c=(X.get(this,"events")||{})[a.type]||[],u=$.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(s=$.event.handlers.call(this,a,c),e=0;(r=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=(($.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,r,o,s,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[r=(i=e[n]).selector+" "]&&(s[r]=i.needsContext?-1<$(r,this).index(c):$.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty($.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[$.expando]?t:new $.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==$t()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===$t()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&S(this,"input"))return this.click(),!1},_default:function(t){return S(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},$.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},$.Event=function(t,e){if(!(this instanceof $.Event))return new $.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Ct:Et,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&$.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[$.expando]=!0},$.Event.prototype={constructor:$.Event,isDefaultPrevented:Et,isPropagationStopped:Et,isImmediatePropagationStopped:Et,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Ct,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Ct,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Ct,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},$.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&wt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&bt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},$.event.addProp),$.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,r){$.event.special[t]={delegateType:r,bindType:r,handle:function(t){var e,n=t.relatedTarget,i=t.handleObj;return n&&(n===this||$.contains(this,n))||(t.type=i.origType,e=i.handler.apply(this,arguments),t.type=r),e}}}),$.fn.extend({on:function(t,e,n,i){return Tt(this,t,e,n,i)},one:function(t,e,n,i){return Tt(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,$(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Et),this.each(function(){$.event.remove(this,t,n,e)});for(r in t)this.off(r,e,t[r]);return this}});var Dt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,St=/<script|<style|<link/i,At=/checked\s*(?:[^=]|=\s*.checked.)/i,kt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Nt(t,e){return S(t,"table")&&S(11!==e.nodeType?e:e.firstChild,"tr")&&$(t).children("tbody")[0]||t}function It(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ot(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function jt(t,e){var n,i,r,o,s,a,l,c;if(1===e.nodeType){if(X.hasData(t)&&(o=X.access(t),s=X.set(e,o),c=o.events))for(r in delete s.handle,s.events={},c)for(n=0,i=c[r].length;n<i;n++)$.event.add(e,r,c[r][n]);G.hasData(t)&&(a=G.access(t),l=$.extend({},a),G.set(e,l))}}function Pt(n,i,r,o){i=g.apply([],i);var t,e,s,a,l,c,u=0,h=n.length,d=h-1,f=i[0],p=y(f);if(p||1<h&&"string"==typeof f&&!v.checkClone&&At.test(f))return n.each(function(t){var e=n.eq(t);p&&(i[0]=f.call(this,t,e.html())),Pt(e,i,r,o)});if(h&&(e=(t=yt(i,n[0].ownerDocument,!1,n,o)).firstChild,1===t.childNodes.length&&(t=e),e||o)){for(a=(s=$.map(ft(t,"script"),It)).length;u<h;u++)l=t,u!==d&&(l=$.clone(l,!0,!0),a&&$.merge(s,ft(l,"script"))),r.call(n[u],l,u);if(a)for(c=s[s.length-1].ownerDocument,$.map(s,Ot),u=0;u<a;u++)l=s[u],ht.test(l.type||"")&&!X.access(l,"globalEval")&&$.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?$._evalUrl&&$._evalUrl(l.src):w(l.textContent.replace(kt,""),c,l))}return n}function Lt(t,e,n){for(var i,r=e?$.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||$.cleanData(ft(i)),i.parentNode&&(n&&$.contains(i.ownerDocument,i)&&pt(ft(i,"script")),i.parentNode.removeChild(i));return t}$.extend({htmlPrefilter:function(t){return t.replace(Dt,"<$1></$2>")},clone:function(t,e,n){var i,r,o,s,a,l,c,u=t.cloneNode(!0),h=$.contains(t.ownerDocument,t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||$.isXMLDoc(t)))for(s=ft(u),i=0,r=(o=ft(t)).length;i<r;i++)a=o[i],l=s[i],void 0,"input"===(c=l.nodeName.toLowerCase())&&ct.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(n)for(o=o||ft(t),s=s||ft(u),i=0,r=o.length;i<r;i++)jt(o[i],s[i]);else jt(t,u);return 0<(s=ft(u,"script")).length&&pt(s,!h&&ft(t,"script")),u},cleanData:function(t){for(var e,n,i,r=$.event.special,o=0;void 0!==(n=t[o]);o++)if(V(n)){if(e=n[X.expando]){if(e.events)for(i in e.events)r[i]?$.event.remove(n,i):$.removeEvent(n,i,e.handle);n[X.expando]=void 0}n[G.expando]&&(n[G.expando]=void 0)}}}),$.fn.extend({detach:function(t){return Lt(this,t,!0)},remove:function(t){return Lt(this,t)},text:function(t){return z(this,function(t){return void 0===t?$.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Pt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Nt(this,t).appendChild(t)})},prepend:function(){return Pt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Nt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Pt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Pt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&($.cleanData(ft(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return $.clone(this,t,e)})},html:function(t){return z(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!St.test(t)&&!dt[(ut.exec(t)||["",""])[1].toLowerCase()]){t=$.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&($.cleanData(ft(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var n=[];return Pt(this,arguments,function(t){var e=this.parentNode;$.inArray(this,n)<0&&($.cleanData(ft(this)),e&&e.replaceChild(t,this))},n)}}),$.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,s){$.fn[t]=function(t){for(var e,n=[],i=$(t),r=i.length-1,o=0;o<=r;o++)e=o===r?this:this.clone(!0),$(i[o])[s](e),l.apply(n,e.get());return this.pushStack(n)}});var Ht=new RegExp("^("+et+")(?!px)[a-z%]+$","i"),Mt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=C),e.getComputedStyle(t)},Rt=new RegExp(it.join("|"),"i");function Wt(t,e,n){var i,r,o,s,a=t.style;return(n=n||Mt(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||$.contains(t.ownerDocument,t)||(s=$.style(t,e)),!v.pixelBoxStyles()&&Ht.test(s)&&Rt.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function Ut(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){a.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",_t.appendChild(a).appendChild(l);var t=C.getComputedStyle(l);n="1%"!==t.top,s=12===e(t.marginLeft),l.style.right="60%",o=36===e(t.right),i=36===e(t.width),l.style.position="absolute",r=36===l.offsetWidth||"absolute",_t.removeChild(a),l=null}}function e(t){return Math.round(parseFloat(t))}var n,i,r,o,s,a=E.createElement("div"),l=E.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===l.style.backgroundClip,$.extend(v,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),o},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),s},scrollboxSize:function(){return t(),r}}))}();var qt=/^(none|table(?!-c[ea]).+)/,zt=/^--/,Ft={position:"absolute",visibility:"hidden",display:"block"},Bt={letterSpacing:"0",fontWeight:"400"},Qt=["Webkit","Moz","ms"],Kt=E.createElement("div").style;function Vt(t){var e=$.cssProps[t];return e||(e=$.cssProps[t]=function(t){if(t in Kt)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Qt.length;n--;)if((t=Qt[n]+e)in Kt)return t}(t)||t),e}function Yt(t,e,n){var i=nt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function Xt(t,e,n,i,r,o){var s="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=$.css(t,n+it[s],!0,r)),i?("content"===n&&(l-=$.css(t,"padding"+it[s],!0,r)),"margin"!==n&&(l-=$.css(t,"border"+it[s]+"Width",!0,r))):(l+=$.css(t,"padding"+it[s],!0,r),"padding"!==n?l+=$.css(t,"border"+it[s]+"Width",!0,r):a+=$.css(t,"border"+it[s]+"Width",!0,r));return!i&&0<=o&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-a-.5))),l}function Gt(t,e,n){var i=Mt(t),r=Wt(t,e,i),o="border-box"===$.css(t,"boxSizing",!1,i),s=o;if(Ht.test(r)){if(!n)return r;r="auto"}return s=s&&(v.boxSizingReliable()||r===t.style[e]),("auto"===r||!parseFloat(r)&&"inline"===$.css(t,"display",!1,i))&&(r=t["offset"+e[0].toUpperCase()+e.slice(1)],s=!0),(r=parseFloat(r)||0)+Xt(t,e,n||(o?"border":"content"),s,i,r)+"px"}function Zt(t,e,n,i,r){return new Zt.prototype.init(t,e,n,i,r)}$.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Wt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=K(e),l=zt.test(e),c=t.style;if(l||(e=Vt(a)),s=$.cssHooks[e]||$.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:c[e];"string"===(o=typeof n)&&(r=nt.exec(n))&&r[1]&&(n=st(t,e,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||($.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var r,o,s,a=K(e);return zt.test(e)||(e=Vt(a)),(s=$.cssHooks[e]||$.cssHooks[a])&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=Wt(t,e,i)),"normal"===r&&e in Bt&&(r=Bt[e]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),$.each(["height","width"],function(t,a){$.cssHooks[a]={get:function(t,e,n){if(e)return!qt.test($.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?Gt(t,a,n):ot(t,Ft,function(){return Gt(t,a,n)})},set:function(t,e,n){var i,r=Mt(t),o="border-box"===$.css(t,"boxSizing",!1,r),s=n&&Xt(t,a,n,o,r);return o&&v.scrollboxSize()===r.position&&(s-=Math.ceil(t["offset"+a[0].toUpperCase()+a.slice(1)]-parseFloat(r[a])-Xt(t,a,"border",!1,r)-.5)),s&&(i=nt.exec(e))&&"px"!==(i[3]||"px")&&(t.style[a]=e,e=$.css(t,a)),Yt(0,e,s)}}}),$.cssHooks.marginLeft=Ut(v.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Wt(t,"marginLeft"))||t.getBoundingClientRect().left-ot(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),$.each({margin:"",padding:"",border:"Width"},function(r,o){$.cssHooks[r+o]={expand:function(t){for(var e=0,n={},i="string"==typeof t?t.split(" "):[t];e<4;e++)n[r+it[e]+o]=i[e]||i[e-2]||i[0];return n}},"margin"!==r&&($.cssHooks[r+o].set=Yt)}),$.fn.extend({css:function(t,e){return z(this,function(t,e,n){var i,r,o={},s=0;if(Array.isArray(e)){for(i=Mt(t),r=e.length;s<r;s++)o[e[s]]=$.css(t,e[s],!1,i);return o}return void 0!==n?$.style(t,e,n):$.css(t,e)},t,e,1<arguments.length)}}),(($.Tween=Zt).prototype={constructor:Zt,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||$.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||($.cssNumber[n]?"":"px")},cur:function(){var t=Zt.propHooks[this.prop];return t&&t.get?t.get(this):Zt.propHooks._default.get(this)},run:function(t){var e,n=Zt.propHooks[this.prop];return this.options.duration?this.pos=e=$.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Zt.propHooks._default.set(this),this}}).init.prototype=Zt.prototype,(Zt.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=$.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){$.fx.step[t.prop]?$.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[$.cssProps[t.prop]]&&!$.cssHooks[t.prop]?t.elem[t.prop]=t.now:$.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=Zt.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},$.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},$.fx=Zt.prototype.init,$.fx.step={};var Jt,te,ee,ne,ie=/^(?:toggle|show|hide)$/,re=/queueHooks$/;function oe(){te&&(!1===E.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(oe):C.setTimeout(oe,$.fx.interval),$.fx.tick())}function se(){return C.setTimeout(function(){Jt=void 0}),Jt=Date.now()}function ae(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)r["margin"+(n=it[i])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function le(t,e,n){for(var i,r=(ce.tweeners[e]||[]).concat(ce.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,e,t))return i}function ce(o,t,e){var n,s,i=0,r=ce.prefilters.length,a=$.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var t=Jt||se(),e=Math.max(0,c.startTime+c.duration-t),n=1-(e/c.duration||0),i=0,r=c.tweens.length;i<r;i++)c.tweens[i].run(n);return a.notifyWith(o,[c,n,e]),n<1&&r?e:(r||a.notifyWith(o,[c,1,0]),a.resolveWith(o,[c]),!1)},c=a.promise({elem:o,props:$.extend({},t),opts:$.extend(!0,{specialEasing:{},easing:$.easing._default},e),originalProperties:t,originalOptions:e,startTime:Jt||se(),duration:e.duration,tweens:[],createTween:function(t,e){var n=$.Tween(o,c.opts,t,e,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(n),n},stop:function(t){var e=0,n=t?c.tweens.length:0;if(s)return this;for(s=!0;e<n;e++)c.tweens[e].run(1);return t?(a.notifyWith(o,[c,1,0]),a.resolveWith(o,[c,t])):a.rejectWith(o,[c,t]),this}}),u=c.props;for(!function(t,e){var n,i,r,o,s;for(n in t)if(r=e[i=K(n)],o=t[n],Array.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),(s=$.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete t[i],o)n in t||(t[n]=o[n],e[n]=r);else e[i]=r}(u,c.opts.specialEasing);i<r;i++)if(n=ce.prefilters[i].call(c,o,u,c.opts))return y(n.stop)&&($._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return $.map(u,le,c),y(c.opts.start)&&c.opts.start.call(o,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),$.fx.timer($.extend(l,{elem:o,anim:c,queue:c.opts.queue})),c}$.Animation=$.extend(ce,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return st(n.elem,t,nt.exec(e),n),n}]},tweener:function(t,e){for(var n,i=0,r=(t=y(t)?(e=t,["*"]):t.match(L)).length;i<r;i++)n=t[i],ce.tweeners[n]=ce.tweeners[n]||[],ce.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,r,o,s,a,l,c,u,h="width"in e||"height"in e,d=this,f={},p=t.style,g=t.nodeType&&rt(t),m=X.get(t,"fxshow");for(i in n.queue||(null==(s=$._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,$.queue(t,"fx").length||s.empty.fire()})})),e)if(r=e[i],ie.test(r)){if(delete e[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||$.style(t,i)}if((l=!$.isEmptyObject(e))||!$.isEmptyObject(f))for(i in h&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=X.get(t,"display")),"none"===(u=$.css(t,"display"))&&(c?u=c:(lt([t],!0),c=t.style.display||c,u=$.css(t,"display"),lt([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===$.css(t,"float")&&(l||(d.done(function(){p.display=c}),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1,f)l||(m?"hidden"in m&&(g=m.hidden):m=X.access(t,"fxshow",{display:c}),o&&(m.hidden=!g),g&&lt([t],!0),d.done(function(){for(i in g||lt([t]),X.remove(t,"fxshow"),f)$.style(t,i,f[i])})),l=le(g?m[i]:0,i,d),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ce.prefilters.unshift(t):ce.prefilters.push(t)}}),$.speed=function(t,e,n){var i=t&&"object"==typeof t?$.extend({},t):{complete:n||!n&&e||y(t)&&t,duration:t,easing:n&&e||e&&!y(e)&&e};return $.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in $.fx.speeds?i.duration=$.fx.speeds[i.duration]:i.duration=$.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&$.dequeue(this,i.queue)},i},$.fn.extend({fadeTo:function(t,e,n,i){return this.filter(rt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(e,t,n,i){var r=$.isEmptyObject(e),o=$.speed(t,n,i),s=function(){var t=ce(this,$.extend({},e),o);(r||X.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(r,t,o){var s=function(t){var e=t.stop;delete t.stop,e(o)};return"string"!=typeof r&&(o=t,t=r,r=void 0),t&&!1!==r&&this.queue(r||"fx",[]),this.each(function(){var t=!0,e=null!=r&&r+"queueHooks",n=$.timers,i=X.get(this);if(e)i[e]&&i[e].stop&&s(i[e]);else for(e in i)i[e]&&i[e].stop&&re.test(e)&&s(i[e]);for(e=n.length;e--;)n[e].elem!==this||null!=r&&n[e].queue!==r||(n[e].anim.stop(o),t=!1,n.splice(e,1));!t&&o||$.dequeue(this,r)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var t,e=X.get(this),n=e[s+"queue"],i=e[s+"queueHooks"],r=$.timers,o=n?n.length:0;for(e.finish=!0,$.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===s&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<o;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete e.finish})}}),$.each(["toggle","show","hide"],function(t,i){var r=$.fn[i];$.fn[i]=function(t,e,n){return null==t||"boolean"==typeof t?r.apply(this,arguments):this.animate(ae(i,!0),t,e,n)}}),$.each({slideDown:ae("show"),slideUp:ae("hide"),slideToggle:ae("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,i){$.fn[t]=function(t,e,n){return this.animate(i,t,e,n)}}),$.timers=[],$.fx.tick=function(){var t,e=0,n=$.timers;for(Jt=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||$.fx.stop(),Jt=void 0},$.fx.timer=function(t){$.timers.push(t),$.fx.start()},$.fx.interval=13,$.fx.start=function(){te||(te=!0,oe())},$.fx.stop=function(){te=null},$.fx.speeds={slow:600,fast:200,_default:400},$.fn.delay=function(i,t){return i=$.fx&&$.fx.speeds[i]||i,t=t||"fx",this.queue(t,function(t,e){var n=C.setTimeout(t,i);e.stop=function(){C.clearTimeout(n)}})},ee=E.createElement("input"),ne=E.createElement("select").appendChild(E.createElement("option")),ee.type="checkbox",v.checkOn=""!==ee.value,v.optSelected=ne.selected,(ee=E.createElement("input")).value="t",ee.type="radio",v.radioValue="t"===ee.value;var ue,he=$.expr.attrHandle;$.fn.extend({attr:function(t,e){return z(this,$.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){$.removeAttr(this,t)})}}),$.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?$.prop(t,e,n):(1===o&&$.isXMLDoc(t)||(r=$.attrHooks[e.toLowerCase()]||($.expr.match.bool.test(e)?ue:void 0)),void 0!==n?null===n?void $.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:null==(i=$.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&S(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(L);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),ue={set:function(t,e,n){return!1===e?$.removeAttr(t,n):t.setAttribute(n,n),n}},$.each($.expr.match.bool.source.match(/\w+/g),function(t,e){var s=he[e]||$.find.attr;he[e]=function(t,e,n){var i,r,o=e.toLowerCase();return n||(r=he[o],he[o]=i,i=null!=s(t,e,n)?o:null,he[o]=r),i}});var de=/^(?:input|select|textarea|button)$/i,fe=/^(?:a|area)$/i;function pe(t){return(t.match(L)||[]).join(" ")}function ge(t){return t.getAttribute&&t.getAttribute("class")||""}function me(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(L)||[]}$.fn.extend({prop:function(t,e){return z(this,$.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[$.propFix[t]||t]})}}),$.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&$.isXMLDoc(t)||(e=$.propFix[e]||e,r=$.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=$.find.attr(t,"tabindex");return e?parseInt(e,10):de.test(t.nodeName)||fe.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||($.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),$.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){$.propFix[this.toLowerCase()]=this}),$.fn.extend({addClass:function(e){var t,n,i,r,o,s,a,l=0;if(y(e))return this.each(function(t){$(this).addClass(e.call(this,t,ge(this)))});if((t=me(e)).length)for(;n=this[l++];)if(r=ge(n),i=1===n.nodeType&&" "+pe(r)+" "){for(s=0;o=t[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=pe(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,o,s,a,l=0;if(y(e))return this.each(function(t){$(this).removeClass(e.call(this,t,ge(this)))});if(!arguments.length)return this.attr("class","");if((t=me(e)).length)for(;n=this[l++];)if(r=ge(n),i=1===n.nodeType&&" "+pe(r)+" "){for(s=0;o=t[s++];)for(;-1<i.indexOf(" "+o+" ");)i=i.replace(" "+o+" "," ");r!==(a=pe(i))&&n.setAttribute("class",a)}return this},toggleClass:function(r,e){var o=typeof r,s="string"===o||Array.isArray(r);return"boolean"==typeof e&&s?e?this.addClass(r):this.removeClass(r):y(r)?this.each(function(t){$(this).toggleClass(r.call(this,t,ge(this),e),e)}):this.each(function(){var t,e,n,i;if(s)for(e=0,n=$(this),i=me(r);t=i[e++];)n.hasClass(t)?n.removeClass(t):n.addClass(t);else void 0!==r&&"boolean"!==o||((t=ge(this))&&X.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===r?"":X.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+pe(ge(n))+" ").indexOf(e))return!0;return!1}});var ve=/\r/g;$.fn.extend({val:function(n){var i,t,r,e=this[0];return arguments.length?(r=y(n),this.each(function(t){var e;1===this.nodeType&&(null==(e=r?n.call(this,t,$(this).val()):n)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=$.map(e,function(t){return null==t?"":t+""})),(i=$.valHooks[this.type]||$.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,e,"value")||(this.value=e))})):e?(i=$.valHooks[e.type]||$.valHooks[e.nodeName.toLowerCase()])&&"get"in i&&void 0!==(t=i.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(ve,""):null==t?"":t:void 0}}),$.extend({valHooks:{option:{get:function(t){var e=$.find.attr(t,"value");return null!=e?e:pe($.text(t))}},select:{get:function(t){var e,n,i,r=t.options,o=t.selectedIndex,s="select-one"===t.type,a=s?null:[],l=s?o+1:r.length;for(i=o<0?l:s?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,"optgroup"))){if(e=$(n).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var n,i,r=t.options,o=$.makeArray(e),s=r.length;s--;)((i=r[s]).selected=-1<$.inArray($.valHooks.option.get(i),o))&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),$.each(["radio","checkbox"],function(){$.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<$.inArray($(t).val(),e)}},v.checkOn||($.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),v.focusin="onfocusin"in C;var ye=/^(?:focusinfocus|focusoutblur)$/,_e=function(t){t.stopPropagation()};$.extend($.event,{trigger:function(t,e,n,i){var r,o,s,a,l,c,u,h,d=[n||E],f=m.call(t,"type")?t.type:t,p=m.call(t,"namespace")?t.namespace.split("."):[];if(o=h=s=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!ye.test(f+$.event.triggered)&&(-1<f.indexOf(".")&&(f=(p=f.split(".")).shift(),p.sort()),l=f.indexOf(":")<0&&"on"+f,(t=t[$.expando]?t:new $.Event(f,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=p.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:$.makeArray(e,[t]),u=$.event.special[f]||{},i||!u.trigger||!1!==u.trigger.apply(n,e))){if(!i&&!u.noBubble&&!_(n)){for(a=u.delegateType||f,ye.test(a+f)||(o=o.parentNode);o;o=o.parentNode)d.push(o),s=o;s===(n.ownerDocument||E)&&d.push(s.defaultView||s.parentWindow||C)}for(r=0;(o=d[r++])&&!t.isPropagationStopped();)h=o,t.type=1<r?a:u.bindType||f,(c=(X.get(o,"events")||{})[t.type]&&X.get(o,"handle"))&&c.apply(o,e),(c=l&&o[l])&&c.apply&&V(o)&&(t.result=c.apply(o,e),!1===t.result&&t.preventDefault());return t.type=f,i||t.isDefaultPrevented()||u._default&&!1!==u._default.apply(d.pop(),e)||!V(n)||l&&y(n[f])&&!_(n)&&((s=n[l])&&(n[l]=null),$.event.triggered=f,t.isPropagationStopped()&&h.addEventListener(f,_e),n[f](),t.isPropagationStopped()&&h.removeEventListener(f,_e),$.event.triggered=void 0,s&&(n[l]=s)),t.result}},simulate:function(t,e,n){var i=$.extend(new $.Event,n,{type:t,isSimulated:!0});$.event.trigger(i,null,e)}}),$.fn.extend({trigger:function(t,e){return this.each(function(){$.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return $.event.trigger(t,e,n,!0)}}),v.focusin||$.each({focus:"focusin",blur:"focusout"},function(n,i){var r=function(t){$.event.simulate(i,t.target,$.event.fix(t))};$.event.special[i]={setup:function(){var t=this.ownerDocument||this,e=X.access(t,i);e||t.addEventListener(n,r,!0),X.access(t,i,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this,e=X.access(t,i)-1;e?X.access(t,i,e):(t.removeEventListener(n,r,!0),X.remove(t,i))}}});var we=C.location,be=Date.now(),xe=/\?/;$.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new C.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||$.error("Invalid XML: "+t),e};var Ce=/\[\]$/,Ee=/\r?\n/g,$e=/^(?:submit|button|image|reset|file)$/i,Te=/^(?:input|select|textarea|keygen)/i;function De(n,t,i,r){var e;if(Array.isArray(t))$.each(t,function(t,e){i||Ce.test(n)?r(n,e):De(n+"["+("object"==typeof e&&null!=e?t:"")+"]",e,i,r)});else if(i||"object"!==b(t))r(n,t);else for(e in t)De(n+"["+e+"]",t[e],i,r)}$.param=function(t,e){var n,i=[],r=function(t,e){var n=y(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!$.isPlainObject(t))$.each(t,function(){r(this.name,this.value)});else for(n in t)De(n,t[n],e,r);return i.join("&")},$.fn.extend({serialize:function(){return $.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=$.prop(this,"elements");return t?$.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!$(this).is(":disabled")&&Te.test(this.nodeName)&&!$e.test(t)&&(this.checked||!ct.test(t))}).map(function(t,e){var n=$(this).val();return null==n?null:Array.isArray(n)?$.map(n,function(t){return{name:e.name,value:t.replace(Ee,"\r\n")}}):{name:e.name,value:n.replace(Ee,"\r\n")}}).get()}});var Se=/%20/g,Ae=/#.*$/,ke=/([?&])_=[^&]*/,Ne=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ie=/^(?:GET|HEAD)$/,Oe=/^\/\//,je={},Pe={},Le="*/".concat("*"),He=E.createElement("a");function Me(o){return function(t,e){"string"!=typeof t&&(e=t,t="*");var n,i=0,r=t.toLowerCase().match(L)||[];if(y(e))for(;n=r[i++];)"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(e)):(o[n]=o[n]||[]).push(e)}}function Re(e,r,o,s){var a={},l=e===Pe;function c(t){var i;return a[t]=!0,$.each(e[t]||[],function(t,e){var n=e(r,o,s);return"string"!=typeof n||l||a[n]?l?!(i=n):void 0:(r.dataTypes.unshift(n),c(n),!1)}),i}return c(r.dataTypes[0])||!a["*"]&&c("*")}function We(t,e){var n,i,r=$.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&$.extend(!0,t,i),t}He.href=we.href,$.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:we.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(we.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Le,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":$.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?We(We(t,$.ajaxSettings),e):We($.ajaxSettings,t)},ajaxPrefilter:Me(je),ajaxTransport:Me(Pe),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var u,h,d,n,f,i,p,g,r,o,m=$.ajaxSetup({},e),v=m.context||m,y=m.context&&(v.nodeType||v.jquery)?$(v):$.event,_=$.Deferred(),w=$.Callbacks("once memory"),b=m.statusCode||{},s={},a={},l="canceled",x={readyState:0,getResponseHeader:function(t){var e;if(p){if(!n)for(n={};e=Ne.exec(d);)n[e[1].toLowerCase()]=e[2];e=n[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return p?d:null},setRequestHeader:function(t,e){return null==p&&(t=a[t.toLowerCase()]=a[t.toLowerCase()]||t,s[t]=e),this},overrideMimeType:function(t){return null==p&&(m.mimeType=t),this},statusCode:function(t){var e;if(t)if(p)x.always(t[x.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||l;return u&&u.abort(e),c(0,e),this}};if(_.promise(x),m.url=((t||m.url||we.href)+"").replace(Oe,we.protocol+"//"),m.type=e.method||e.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(L)||[""],null==m.crossDomain){i=E.createElement("a");try{i.href=m.url,i.href=i.href,m.crossDomain=He.protocol+"//"+He.host!=i.protocol+"//"+i.host}catch(t){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=$.param(m.data,m.traditional)),Re(je,m,e,x),p)return x;for(r in(g=$.event&&m.global)&&0==$.active++&&$.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Ie.test(m.type),h=m.url.replace(Ae,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(Se,"+")):(o=m.url.slice(h.length),m.data&&(m.processData||"string"==typeof m.data)&&(h+=(xe.test(h)?"&":"?")+m.data,delete m.data),!1===m.cache&&(h=h.replace(ke,"$1"),o=(xe.test(h)?"&":"?")+"_="+be+++o),m.url=h+o),m.ifModified&&($.lastModified[h]&&x.setRequestHeader("If-Modified-Since",$.lastModified[h]),$.etag[h]&&x.setRequestHeader("If-None-Match",$.etag[h])),(m.data&&m.hasContent&&!1!==m.contentType||e.contentType)&&x.setRequestHeader("Content-Type",m.contentType),x.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Le+"; q=0.01":""):m.accepts["*"]),m.headers)x.setRequestHeader(r,m.headers[r]);if(m.beforeSend&&(!1===m.beforeSend.call(v,x,m)||p))return x.abort();if(l="abort",w.add(m.complete),x.done(m.success),x.fail(m.error),u=Re(Pe,m,e,x)){if(x.readyState=1,g&&y.trigger("ajaxSend",[x,m]),p)return x;m.async&&0<m.timeout&&(f=C.setTimeout(function(){x.abort("timeout")},m.timeout));try{p=!1,u.send(s,c)}catch(t){if(p)throw t;c(-1,t)}}else c(-1,"No Transport");function c(t,e,n,i){var r,o,s,a,l,c=e;p||(p=!0,f&&C.clearTimeout(f),u=void 0,d=i||"",x.readyState=0<t?4:0,r=200<=t&&t<300||304===t,n&&(a=function(t,e,n){for(var i,r,o,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(m,x,n)),a=function(t,e,n,i){var r,o,s,a,l,c={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(o=u.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(m,a,x,r),r?(m.ifModified&&((l=x.getResponseHeader("Last-Modified"))&&($.lastModified[h]=l),(l=x.getResponseHeader("etag"))&&($.etag[h]=l)),204===t||"HEAD"===m.type?c="nocontent":304===t?c="notmodified":(c=a.state,o=a.data,r=!(s=a.error))):(s=c,!t&&c||(c="error",t<0&&(t=0))),x.status=t,x.statusText=(e||c)+"",r?_.resolveWith(v,[o,c,x]):_.rejectWith(v,[x,c,s]),x.statusCode(b),b=void 0,g&&y.trigger(r?"ajaxSuccess":"ajaxError",[x,m,r?o:s]),w.fireWith(v,[x,c]),g&&(y.trigger("ajaxComplete",[x,m]),--$.active||$.event.trigger("ajaxStop")))}return x},getJSON:function(t,e,n){return $.get(t,e,n,"json")},getScript:function(t,e){return $.get(t,void 0,e,"script")}}),$.each(["get","post"],function(t,r){$[r]=function(t,e,n,i){return y(e)&&(i=i||n,n=e,e=void 0),$.ajax($.extend({url:t,type:r,dataType:i,data:e,success:n},$.isPlainObject(t)&&t))}}),$._evalUrl=function(t){return $.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},$.fn.extend({wrapAll:function(t){var e;return this[0]&&(y(t)&&(t=t.call(this[0])),e=$(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(n){return y(n)?this.each(function(t){$(this).wrapInner(n.call(this,t))}):this.each(function(){var t=$(this),e=t.contents();e.length?e.wrapAll(n):t.append(n)})},wrap:function(e){var n=y(e);return this.each(function(t){$(this).wrapAll(n?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){$(this).replaceWith(this.childNodes)}),this}}),$.expr.pseudos.hidden=function(t){return!$.expr.pseudos.visible(t)},$.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},$.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(t){}};var Ue={0:200,1223:204},qe=$.ajaxSettings.xhr();v.cors=!!qe&&"withCredentials"in qe,v.ajax=qe=!!qe,$.ajaxTransport(function(r){var o,s;if(v.cors||qe&&!r.crossDomain)return{send:function(t,e){var n,i=r.xhr();if(i.open(r.type,r.url,r.async,r.username,r.password),r.xhrFields)for(n in r.xhrFields)i[n]=r.xhrFields[n];for(n in r.mimeType&&i.overrideMimeType&&i.overrideMimeType(r.mimeType),r.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)i.setRequestHeader(n,t[n]);o=function(t){return function(){o&&(o=s=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===t?i.abort():"error"===t?"number"!=typeof i.status?e(0,"error"):e(i.status,i.statusText):e(Ue[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=o(),s=i.onerror=i.ontimeout=o("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&C.setTimeout(function(){o&&s()})},o=o("abort");try{i.send(r.hasContent&&r.data||null)}catch(t){if(o)throw t}},abort:function(){o&&o()}}}),$.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),$.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return $.globalEval(t),t}}}),$.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),$.ajaxTransport("script",function(n){var i,r;if(n.crossDomain)return{send:function(t,e){i=$("<script>").prop({charset:n.scriptCharset,src:n.url}).on("load error",r=function(t){i.remove(),r=null,t&&e("error"===t.type?404:200,t.type)}),E.head.appendChild(i[0])},abort:function(){r&&r()}}});var ze,Fe=[],Be=/(=)\?(?=&|$)|\?\?/;$.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Fe.pop()||$.expando+"_"+be++;return this[t]=!0,t}}),$.ajaxPrefilter("json jsonp",function(t,e,n){var i,r,o,s=!1!==t.jsonp&&(Be.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Be.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=y(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Be,"$1"+i):!1!==t.jsonp&&(t.url+=(xe.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return o||$.error(i+" was not called"),o[0]},t.dataTypes[0]="json",r=C[i],C[i]=function(){o=arguments},n.always(function(){void 0===r?$(C).removeProp(i):C[i]=r,t[i]&&(t.jsonpCallback=e.jsonpCallback,Fe.push(i)),o&&y(r)&&r(o[0]),o=r=void 0}),"script"}),v.createHTMLDocument=((ze=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ze.childNodes.length),$.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(v.createHTMLDocument?((i=(e=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,e.head.appendChild(i)):e=E),o=!n&&[],(r=A.exec(t))?[e.createElement(r[1])]:(r=yt([t],e,o),o&&o.length&&$(o).remove(),$.merge([],r.childNodes)));var i,r,o},$.fn.load=function(t,e,n){var i,r,o,s=this,a=t.indexOf(" ");return-1<a&&(i=pe(t.slice(a)),t=t.slice(0,a)),y(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),0<s.length&&$.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?$("<div>").append($.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},$.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){$.fn[e]=function(t){return this.on(e,t)}}),$.expr.pseudos.animated=function(e){return $.grep($.timers,function(t){return e===t.elem}).length},$.offset={setOffset:function(t,e,n){var i,r,o,s,a,l,c=$.css(t,"position"),u=$(t),h={};"static"===c&&(t.style.position="relative"),a=u.offset(),o=$.css(t,"top"),l=$.css(t,"left"),r=("absolute"===c||"fixed"===c)&&-1<(o+l).indexOf("auto")?(s=(i=u.position()).top,i.left):(s=parseFloat(o)||0,parseFloat(l)||0),y(e)&&(e=e.call(t,n,$.extend({},a))),null!=e.top&&(h.top=e.top-a.top+s),null!=e.left&&(h.left=e.left-a.left+r),"using"in e?e.using.call(t,h):u.css(h)}},$.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){$.offset.setOffset(this,e,t)});var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],r={top:0,left:0};if("fixed"===$.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===$.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((r=$(t).offset()).top+=$.css(t,"borderTopWidth",!0),r.left+=$.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-$.css(i,"marginTop",!0),left:e.left-r.left-$.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===$.css(t,"position");)t=t.offsetParent;return t||_t})}}),$.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,r){var o="pageYOffset"===r;$.fn[e]=function(t){return z(this,function(t,e,n){var i;if(_(t)?i=t:9===t.nodeType&&(i=t.defaultView),void 0===n)return i?i[r]:t[e];i?i.scrollTo(o?i.pageXOffset:n,o?n:i.pageYOffset):t[e]=n},e,t,arguments.length)}}),$.each(["top","left"],function(t,n){$.cssHooks[n]=Ut(v.pixelPosition,function(t,e){if(e)return e=Wt(t,n),Ht.test(e)?$(t).position()[n]+"px":e})}),$.each({Height:"height",Width:"width"},function(s,a){$.each({padding:"inner"+s,content:a,"":"outer"+s},function(i,o){$.fn[o]=function(t,e){var n=arguments.length&&(i||"boolean"!=typeof t),r=i||(!0===t||!0===e?"margin":"border");return z(this,function(t,e,n){var i;return _(t)?0===o.indexOf("outer")?t["inner"+s]:t.document.documentElement["client"+s]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+s],i["scroll"+s],t.body["offset"+s],i["offset"+s],i["client"+s])):void 0===n?$.css(t,e,r):$.style(t,e,n,r)},a,n?t:void 0,n)}})}),$.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,n){$.fn[n]=function(t,e){return 0<arguments.length?this.on(n,null,t,e):this.trigger(n)}}),$.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),$.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),$.proxy=function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),y(t))return i=a.call(arguments,2),(r=function(){return t.apply(e||this,i.concat(a.call(arguments)))}).guid=t.guid=t.guid||$.guid++,r},$.holdReady=function(t){t?$.readyWait++:$.ready(!0)},$.isArray=Array.isArray,$.parseJSON=JSON.parse,$.nodeName=S,$.isFunction=y,$.isWindow=_,$.camelCase=K,$.type=b,$.now=Date.now,$.isNumeric=function(t){var e=$.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return $});var Qe=C.jQuery,Ke=C.$;return $.noConflict=function(t){return C.$===$&&(C.$=Ke),t&&C.jQuery===$&&(C.jQuery=Qe),$},t||(C.jQuery=C.$=$),$}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Popper=e()}(this,function(){"use strict";for(var t="undefined"!=typeof window&&"undefined"!=typeof document,e=["Edge","Trident","Firefox"],n=0,i=0;i<e.length;i+=1)if(t&&0<=navigator.userAgent.indexOf(e[i])){n=1;break}var s=t&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},n))}};function a(t){return t&&"[object Function]"==={}.toString.call(t)}function w(t,e){if(1!==t.nodeType)return[];var n=getComputedStyle(t,null);return e?n[e]:n}function f(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function p(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=w(t),n=e.overflow,i=e.overflowX,r=e.overflowY;return/(auto|scroll|overlay)/.test(n+r+i)?t:p(f(t))}var r=t&&!(!window.MSInputMethodContext||!document.documentMode),o=t&&/MSIE 10/.test(navigator.userAgent);function g(t){return 11===t?r:10===t?o:r||o}function _(t){if(!t)return document.documentElement;for(var e=g(10)?document.body:null,n=t.offsetParent;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===w(n,"position")?_(n):n:t?t.ownerDocument.documentElement:document.documentElement}function u(t){return null!==t.parentNode?u(t.parentNode):t}function m(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,r=n?e:t,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var s,a,l=o.commonAncestorContainer;if(t!==l&&e!==l||i.contains(r))return"BODY"===(a=(s=l).nodeName)||"HTML"!==a&&_(s.firstElementChild)!==s?_(l):l;var c=u(t);return c.host?m(c.host,e):m(t,u(e).host)}function v(t){var e="top"===(1<arguments.length&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"!==n&&"HTML"!==n)return t[e];var i=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||i)[e]}function h(t,e){var n="x"===e?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+i+"Width"],10)}function l(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],g(10)?parseInt(n["offset"+t])+parseInt(i["margin"+("Height"===t?"Top":"Left")])+parseInt(i["margin"+("Height"===t?"Bottom":"Right")]):0)}function y(t){var e=t.body,n=t.documentElement,i=g(10)&&getComputedStyle(n);return{height:l("Height",e,n,i),width:l("Width",e,n,i)}}var c=function(){function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}}(),b=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},x=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function C(t){return x({},t,{right:t.left+t.width,bottom:t.top+t.height})}function E(t){var e={};try{if(g(10)){e=t.getBoundingClientRect();var n=v(t,"top"),i=v(t,"left");e.top+=n,e.left+=i,e.bottom+=n,e.right+=i}else e=t.getBoundingClientRect()}catch(t){}var r={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?y(t.ownerDocument):{},s=o.width||t.clientWidth||r.right-r.left,a=o.height||t.clientHeight||r.bottom-r.top,l=t.offsetWidth-s,c=t.offsetHeight-a;if(l||c){var u=w(t);l-=h(u,"x"),c-=h(u,"y"),r.width-=l,r.height-=c}return C(r)}function $(t,e){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],i=g(10),r="HTML"===e.nodeName,o=E(t),s=E(e),a=p(t),l=w(e),c=parseFloat(l.borderTopWidth,10),u=parseFloat(l.borderLeftWidth,10);n&&r&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var h=C({top:o.top-s.top-c,left:o.left-s.left-u,width:o.width,height:o.height});if(h.marginTop=0,h.marginLeft=0,!i&&r){var d=parseFloat(l.marginTop,10),f=parseFloat(l.marginLeft,10);h.top-=c-d,h.bottom-=c-d,h.left-=u-f,h.right-=u-f,h.marginTop=d,h.marginLeft=f}return(i&&!n?e.contains(a):e===a&&"BODY"!==a.nodeName)&&(h=function(t,e){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],i=v(e,"top"),r=v(e,"left"),o=n?-1:1;return t.top+=i*o,t.bottom+=i*o,t.left+=r*o,t.right+=r*o,t}(h,e)),h}function T(t){if(!t||!t.parentElement||g())return document.documentElement;for(var e=t.parentElement;e&&"none"===w(e,"transform");)e=e.parentElement;return e||document.documentElement}function d(t,e,n,i){var r=4<arguments.length&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},s=r?T(t):m(t,e);if("viewport"===i)o=function(t){var e=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,i=$(t,n),r=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),s=e?0:v(n),a=e?0:v(n,"left");return C({top:s-i.top+i.marginTop,left:a-i.left+i.marginLeft,width:r,height:o})}(s,r);else{var a=void 0;"scrollParent"===i?"BODY"===(a=p(f(e))).nodeName&&(a=t.ownerDocument.documentElement):a="window"===i?t.ownerDocument.documentElement:i;var l=$(a,s,r);if("HTML"!==a.nodeName||function t(e){var n=e.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===w(e,"position")||t(f(e)))}(s))o=l;else{var c=y(t.ownerDocument),u=c.height,h=c.width;o.top+=l.top-l.marginTop,o.bottom=u+l.top,o.left+=l.left-l.marginLeft,o.right=h+l.left}}var d="number"==typeof(n=n||0);return o.left+=d?n:n.left||0,o.top+=d?n:n.top||0,o.right-=d?n:n.right||0,o.bottom-=d?n:n.bottom||0,o}function D(t,e,i,n,r){var o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var s=d(i,n,o,r),a={top:{width:s.width,height:e.top-s.top},right:{width:s.right-e.right,height:s.height},bottom:{width:s.width,height:s.bottom-e.bottom},left:{width:e.left-s.left,height:s.height}},l=Object.keys(a).map(function(t){return x({key:t},a[t],{area:(e=a[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),c=l.filter(function(t){var e=t.width,n=t.height;return e>=i.clientWidth&&n>=i.clientHeight}),u=0<c.length?c[0].key:l[0].key,h=t.split("-")[1];return u+(h?"-"+h:"")}function S(t,e,n){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return $(n,i?T(e):m(e,n),i)}function A(t){var e=getComputedStyle(t),n=parseFloat(e.marginTop)+parseFloat(e.marginBottom),i=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function k(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function N(t,e,n){n=n.split("-")[0];var i=A(t),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),s=o?"top":"left",a=o?"left":"top",l=o?"height":"width",c=o?"width":"height";return r[s]=e[s]+e[l]/2-i[l]/2,r[a]=n===a?e[a]-i[c]:e[k(a)],r}function I(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function O(t,n,e){return(void 0===e?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var i=I(t,function(t){return t[e]===n});return t.indexOf(i)}(t,"name",e))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var e=t.function||t.fn;t.enabled&&a(e)&&(n.offsets.popper=C(n.offsets.popper),n.offsets.reference=C(n.offsets.reference),n=e(n,t))}),n}function j(t,n){return t.some(function(t){var e=t.name;return t.enabled&&e===n})}function P(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length;i++){var r=e[i],o=r?""+r+n:t;if(void 0!==document.body.style[o])return o}return null}function L(t){var e=t.ownerDocument;return e?e.defaultView:window}function H(t,e,n,i){n.updateBound=i,L(t).addEventListener("resize",n.updateBound,{passive:!0});var r=p(t);return function t(e,n,i,r){var o="BODY"===e.nodeName,s=o?e.ownerDocument.defaultView:e;s.addEventListener(n,i,{passive:!0}),o||t(p(s.parentNode),n,i,r),r.push(s)}(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function M(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,L(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function R(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function W(n,i){Object.keys(i).forEach(function(t){var e="";-1!==["width","height","top","right","bottom","left"].indexOf(t)&&R(i[t])&&(e="px"),n.style[t]=i[t]+e})}function U(t,e,n){var i=I(t,function(t){return t.name===e}),r=!!i&&t.some(function(t){return t.name===n&&t.enabled&&t.order<i.order});if(!r){var o="`"+e+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}var q=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],z=q.slice(3);function F(t){var e=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=z.indexOf(t),i=z.slice(n+1).concat(z.slice(0,n));return e?i.reverse():i}var B="flip",Q="clockwise",K="counterclockwise";function V(t,r,o,e){var s=[0,0],a=-1!==["right","left"].indexOf(e),n=t.split(/(\+|\-)/).map(function(t){return t.trim()}),i=n.indexOf(I(n,function(t){return-1!==t.search(/,|\s/)}));n[i]&&-1===n[i].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==i?[n.slice(0,i).concat([n[i].split(l)[0]]),[n[i].split(l)[1]].concat(n.slice(i+1))]:[n];return(c=c.map(function(t,e){var n=(1===e?!a:a)?"height":"width",i=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,i=!0,t):i?(t[t.length-1]+=e,i=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,i){var r=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],s=r[2];if(!o)return t;if(0!==s.indexOf("%"))return"vh"!==s&&"vw"!==s?o:("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return C(a)[e]/100*o}(t,n,r,o)})})).forEach(function(n,i){n.forEach(function(t,e){R(t)&&(s[i]+=t*("-"===n[e-1]?-1:1))})}),s}var Y={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var r=t.offsets,o=r.reference,s=r.popper,a=-1!==["bottom","top"].indexOf(n),l=a?"left":"top",c=a?"width":"height",u={start:b({},l,o[l]),end:b({},l,o[l]+o[c]-s[c])};t.offsets.popper=x({},s,u[i])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,i=t.placement,r=t.offsets,o=r.popper,s=r.reference,a=i.split("-")[0],l=void 0;return l=R(+n)?[+n,0]:V(n,o,s,a),"left"===a?(o.top+=l[0],o.left-=l[1]):"right"===a?(o.top+=l[0],o.left+=l[1]):"top"===a?(o.left+=l[0],o.top-=l[1]):"bottom"===a&&(o.left+=l[0],o.top+=l[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,i){var e=i.boundariesElement||_(t.instance.popper);t.instance.reference===e&&(e=_(e));var n=P("transform"),r=t.instance.popper.style,o=r.top,s=r.left,a=r[n];r.top="",r.left="",r[n]="";var l=d(t.instance.popper,t.instance.reference,i.padding,e,t.positionFixed);r.top=o,r.left=s,r[n]=a,i.boundaries=l;var c=i.priority,u=t.offsets.popper,h={primary:function(t){var e=u[t];return u[t]<l[t]&&!i.escapeWithReference&&(e=Math.max(u[t],l[t])),b({},t,e)},secondary:function(t){var e="right"===t?"left":"top",n=u[e];return u[t]>l[t]&&!i.escapeWithReference&&(n=Math.min(u[e],l[t]-("right"===t?u.width:u.height))),b({},e,n)}};return c.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";u=x({},u,h[e](t))}),t.offsets.popper=u,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,i=e.reference,r=t.placement.split("-")[0],o=Math.floor,s=-1!==["top","bottom"].indexOf(r),a=s?"right":"bottom",l=s?"left":"top",c=s?"width":"height";return n[a]<o(i[l])&&(t.offsets.popper[l]=o(i[l])-n[c]),n[l]>o(i[a])&&(t.offsets.popper[l]=o(i[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!U(t.instance.modifiers,"arrow","keepTogether"))return t;var i=e.element;if("string"==typeof i){if(!(i=t.instance.popper.querySelector(i)))return t}else if(!t.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],o=t.offsets,s=o.popper,a=o.reference,l=-1!==["left","right"].indexOf(r),c=l?"height":"width",u=l?"Top":"Left",h=u.toLowerCase(),d=l?"left":"top",f=l?"bottom":"right",p=A(i)[c];a[f]-p<s[h]&&(t.offsets.popper[h]-=s[h]-(a[f]-p)),a[h]+p>s[f]&&(t.offsets.popper[h]+=a[h]+p-s[f]),t.offsets.popper=C(t.offsets.popper);var g=a[h]+a[c]/2-p/2,m=w(t.instance.popper),v=parseFloat(m["margin"+u],10),y=parseFloat(m["border"+u+"Width"],10),_=g-t.offsets.popper[h]-v-y;return _=Math.max(Math.min(s[c]-p,_),0),t.arrowElement=i,t.offsets.arrow=(b(n={},h,Math.round(_)),b(n,d,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(p,g){if(j(p.instance.modifiers,"inner"))return p;if(p.flipped&&p.placement===p.originalPlacement)return p;var m=d(p.instance.popper,p.instance.reference,g.padding,g.boundariesElement,p.positionFixed),v=p.placement.split("-")[0],y=k(v),_=p.placement.split("-")[1]||"",w=[];switch(g.behavior){case B:w=[v,y];break;case Q:w=F(v);break;case K:w=F(v,!0);break;default:w=g.behavior}return w.forEach(function(t,e){if(v!==t||w.length===e+1)return p;v=p.placement.split("-")[0],y=k(v);var n,i=p.offsets.popper,r=p.offsets.reference,o=Math.floor,s="left"===v&&o(i.right)>o(r.left)||"right"===v&&o(i.left)<o(r.right)||"top"===v&&o(i.bottom)>o(r.top)||"bottom"===v&&o(i.top)<o(r.bottom),a=o(i.left)<o(m.left),l=o(i.right)>o(m.right),c=o(i.top)<o(m.top),u=o(i.bottom)>o(m.bottom),h="left"===v&&a||"right"===v&&l||"top"===v&&c||"bottom"===v&&u,d=-1!==["top","bottom"].indexOf(v),f=!!g.flipVariations&&(d&&"start"===_&&a||d&&"end"===_&&l||!d&&"start"===_&&c||!d&&"end"===_&&u);(s||h||f)&&(p.flipped=!0,(s||h)&&(v=w[e+1]),f&&(_="end"===(n=_)?"start":"start"===n?"end":n),p.placement=v+(_?"-"+_:""),p.offsets.popper=x({},p.offsets.popper,N(p.instance.popper,p.offsets.reference,p.placement)),p=O(p.instance.modifiers,p,"flip"))}),p},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,r=i.popper,o=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return r[s?"left":"top"]=o[n]-(a?r[s?"width":"height"]:0),t.placement=k(e),t.offsets.popper=C(r),t}},hide:{order:800,enabled:!0,fn:function(t){if(!U(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=I(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,r=t.offsets.popper,o=I(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==o?o:e.gpuAcceleration,a=_(t.instance.popper),l=E(a),c={position:r.position},u={left:Math.floor(r.left),top:Math.round(r.top),bottom:Math.round(r.bottom),right:Math.floor(r.right)},h="bottom"===n?"top":"bottom",d="right"===i?"left":"right",f=P("transform"),p=void 0,g=void 0;if(g="bottom"===h?"HTML"===a.nodeName?-a.clientHeight+u.bottom:-l.height+u.bottom:u.top,p="right"===d?"HTML"===a.nodeName?-a.clientWidth+u.right:-l.width+u.right:u.left,s&&f)c[f]="translate3d("+p+"px, "+g+"px, 0)",c[h]=0,c[d]=0,c.willChange="transform";else{var m="bottom"===h?-1:1,v="right"===d?-1:1;c[h]=g*m,c[d]=p*v,c.willChange=h+", "+d}var y={"x-placement":t.placement};return t.attributes=x({},y,t.attributes),t.styles=x({},c,t.styles),t.arrowStyles=x({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return W(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&W(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,r){var o=S(r,e,t,n.positionFixed),s=D(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",s),W(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},X=function(){function o(t,e){var n=this,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=s(this.update.bind(this)),this.options=x({},o.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=e&&e.jquery?e[0]:e,this.options.modifiers={},Object.keys(x({},o.Defaults.modifiers,i.modifiers)).forEach(function(t){n.options.modifiers[t]=x({},o.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return x({name:t},n.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&a(t.onLoad)&&t.onLoad(n.reference,n.popper,n.options,t,n.state)}),this.update();var r=this.options.eventsEnabled;r&&this.enableEventListeners(),this.state.eventsEnabled=r}return c(o,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=S(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=D(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=N(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=O(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,j(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[P("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=H(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return M.call(this)}}]),o}();return X.Utils=("undefined"!=typeof window?window:global).PopperUtils,X.placements=q,X.Defaults=Y,X});var Util=function(){var e=!1,n={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};function t(t){var e=this,n=!1;return $(this).one(l.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||l.triggerTransitionEnd(e)},t),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");e&&"#"!==e||(e=t.getAttribute("href")||"");try{return 0<$(document).find(e).length?e:null}catch(t){return null}},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){$(t).trigger(e.end)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var r=n[i],o=e[i],s=o&&l.isElement(o)?"element":(a=o,{}.toString.call(a).match(/\s([a-zA-Z]+)/)[1].toLowerCase());if(!new RegExp(r).test(s))throw new Error(t.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+r+'".')}var a}};return e=function(){if(window.QUnit)return!1;var t=document.createElement("bootstrap");for(var e in n)if(void 0!==t.style[e])return{end:n[e]};return!1}(),$.fn.emulateTransitionEnd=t,l.supportsTransitionEnd()&&($.event.special[l.TRANSITION_END]={bindType:e.end,delegateType:e.end,handle:function(t){if($(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}),l}($);function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var Alert=function(){var t="alert",r="bs.alert",e="."+r,n=$.fn[t],o={CLOSE:"close"+e,CLOSED:"closed"+e,CLICK_DATA_API:"click"+e+".data-api"},s="alert",a="fade",l="show",i=function(){function i(t){this._element=t}var t=i.prototype;return t.close=function(t){t=t||this._element;var e=this._getRootElement(t);this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},t.dispose=function(){$.removeData(this._element,r),this._element=null},t._getRootElement=function(t){var e=Util.getSelectorFromElement(t),n=!1;return e&&(n=$(e)[0]),n||(n=$(t).closest("."+s)[0]),n},t._triggerCloseEvent=function(t){var e=$.Event(o.CLOSE);return $(t).trigger(e),e},t._removeElement=function(e){var n=this;$(e).removeClass(l),Util.supportsTransitionEnd()&&$(e).hasClass(a)?$(e).one(Util.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(150):this._destroyElement(e)},t._destroyElement=function(t){$(t).detach().trigger(o.CLOSED).remove()},i._jQueryInterface=function(n){return this.each(function(){var t=$(this),e=t.data(r);e||(e=new i(this),t.data(r,e)),"close"===n&&e[n](this)})},i._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},_createClass(i,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}}]),i}();return $(document).on(o.CLICK_DATA_API,'[data-dismiss="alert"]',i._handleDismiss(new i)),$.fn[t]=i._jQueryInterface,$.fn[t].Constructor=i,$.fn[t].noConflict=function(){return $.fn[t]=n,i._jQueryInterface},i}($);function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var Button=function(){var t="button",i="bs.button",e="."+i,n=".data-api",r=$.fn[t],o="active",s="btn",a="focus",l='[data-toggle^="button"]',c='[data-toggle="buttons"]',u="input",h=".active",d=".btn",f={CLICK_DATA_API:"click"+e+n,FOCUS_BLUR_DATA_API:"focus"+e+n+" blur"+e+n},p=function(){function n(t){this._element=t}var t=n.prototype;return t.toggle=function(){var t=!0,e=!0,n=$(this._element).closest(c)[0];if(n){var i=$(this._element).find(u)[0];if(i){if("radio"===i.type)if(i.checked&&$(this._element).hasClass(o))t=!1;else{var r=$(n).find(h)[0];r&&$(r).removeClass(o)}if(t){if(i.hasAttribute("disabled")||n.hasAttribute("disabled")||i.classList.contains("disabled")||n.classList.contains("disabled"))return;i.checked=!$(this._element).hasClass(o),$(i).trigger("change")}i.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!$(this._element).hasClass(o)),t&&$(this._element).toggleClass(o)},t.dispose=function(){$.removeData(this._element,i),this._element=null},n._jQueryInterface=function(e){return this.each(function(){var t=$(this).data(i);t||(t=new n(this),$(this).data(i,t)),"toggle"===e&&t[e]()})},_createClass(n,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}}]),n}();return $(document).on(f.CLICK_DATA_API,l,function(t){t.preventDefault();var e=t.target;$(e).hasClass(s)||(e=$(e).closest(d)),p._jQueryInterface.call($(e),"toggle")}).on(f.FOCUS_BLUR_DATA_API,l,function(t){var e=$(t.target).closest(d)[0];$(e).toggleClass(a,/^focus(in)?$/.test(t.type))}),$.fn[t]=p._jQueryInterface,$.fn[t].Constructor=p,$.fn[t].noConflict=function(){return $.fn[t]=r,p._jQueryInterface},p}($);function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var Carousel=function(){var e="carousel",s="bs.carousel",n="."+s,t=".data-api",i=$.fn[e],r={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},a={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},d="next",l="prev",f="left",p="right",g={SLIDE:"slide"+n,SLID:"slid"+n,KEYDOWN:"keydown"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n,TOUCHEND:"touchend"+n,LOAD_DATA_API:"load"+n+t,CLICK_DATA_API:"click"+n+t},c="carousel",m="active",v="slide",y="carousel-item-right",_="carousel-item-left",w="carousel-item-next",b="carousel-item-prev",u=".active",x=".active.carousel-item",h=".carousel-item",C=".carousel-item-next, .carousel-item-prev",E=".carousel-indicators",o="[data-slide], [data-slide-to]",T='[data-ride="carousel"]',D=function(){function o(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(e),this._element=$(t)[0],this._indicatorsElement=$(this._element).find(E)[0],this._addEventListeners()}var t=o.prototype;return t.next=function(){this._isSliding||this._slide(d)},t.nextWhenVisible=function(){!document.hidden&&$(this._element).is(":visible")&&"hidden"!==$(this._element).css("visibility")&&this.next()},t.prev=function(){this._isSliding||this._slide(l)},t.pause=function(t){t||(this._isPaused=!0),$(this._element).find(C)[0]&&Util.supportsTransitionEnd()&&(Util.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},t.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},t.to=function(t){var e=this;this._activeElement=$(this._element).find(x)[0];var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)$(this._element).one(g.SLID,function(){return e.to(t)});else{if(n===t)return this.pause(),void this.cycle();var i=n<t?d:l;this._slide(i,this._items[t])}},t.dispose=function(){$(this._element).off(n),$.removeData(this._element,s),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},t._getConfig=function(t){return t=$.extend({},r,t),Util.typeCheckConfig(e,t,a),t},t._addEventListeners=function(){var e=this;this._config.keyboard&&$(this._element).on(g.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&($(this._element).on(g.MOUSEENTER,function(t){return e.pause(t)}).on(g.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&$(this._element).on(g.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},t._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next();break;default:return}},t._getItemIndex=function(t){return this._items=$.makeArray($(t).parent().find(h)),this._items.indexOf(t)},t._getItemByDirection=function(t,e){var n=t===d,i=t===l,r=this._getItemIndex(e),o=this._items.length-1;if((i&&0===r||n&&r===o)&&!this._config.wrap)return e;var s=(r+(t===l?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},t._triggerSlideEvent=function(t,e){var n=this._getItemIndex(t),i=this._getItemIndex($(this._element).find(x)[0]),r=$.Event(g.SLIDE,{relatedTarget:t,direction:e,from:i,to:n});return $(this._element).trigger(r),r},t._setActiveIndicatorElement=function(t){if(this._indicatorsElement){$(this._indicatorsElement).find(u).removeClass(m);var e=this._indicatorsElement.children[this._getItemIndex(t)];e&&$(e).addClass(m)}},t._slide=function(t,e){var n,i,r,o=this,s=$(this._element).find(x)[0],a=this._getItemIndex(s),l=e||s&&this._getItemByDirection(t,s),c=this._getItemIndex(l),u=Boolean(this._interval);if(r=t===d?(n=_,i=w,f):(n=y,i=b,p),l&&$(l).hasClass(m))this._isSliding=!1;else if(!this._triggerSlideEvent(l,r).isDefaultPrevented()&&s&&l){this._isSliding=!0,u&&this.pause(),this._setActiveIndicatorElement(l);var h=$.Event(g.SLID,{relatedTarget:l,direction:r,from:a,to:c});Util.supportsTransitionEnd()&&$(this._element).hasClass(v)?($(l).addClass(i),Util.reflow(l),$(s).addClass(n),$(l).addClass(n),$(s).one(Util.TRANSITION_END,function(){$(l).removeClass(n+" "+i).addClass(m),$(s).removeClass(m+" "+i+" "+n),o._isSliding=!1,setTimeout(function(){return $(o._element).trigger(h)},0)}).emulateTransitionEnd(600)):($(s).removeClass(m),$(l).addClass(m),this._isSliding=!1,$(this._element).trigger(h)),u&&this.cycle()}},o._jQueryInterface=function(i){return this.each(function(){var t=$(this).data(s),e=$.extend({},r,$(this).data());"object"==typeof i&&$.extend(e,i);var n="string"==typeof i?i:e.slide;if(t||(t=new o(this,e),$(this).data(s,t)),"number"==typeof i)t.to(i);else if("string"==typeof n){if(void 0===t[n])throw new Error('No method named "'+n+'"');t[n]()}else e.interval&&(t.pause(),t.cycle())})},o._dataApiClickHandler=function(t){var e=Util.getSelectorFromElement(this);if(e){var n=$(e)[0];if(n&&$(n).hasClass(c)){var i=$.extend({},$(n).data(),$(this).data()),r=this.getAttribute("data-slide-to");r&&(i.interval=!1),o._jQueryInterface.call($(n),i),r&&$(n).data(s).to(r),t.preventDefault()}}},_createClass(o,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return r}}]),o}();return $(document).on(g.CLICK_DATA_API,o,D._dataApiClickHandler),$(window).on(g.LOAD_DATA_API,function(){$(T).each(function(){var t=$(this);D._jQueryInterface.call(t,t.data())})}),$.fn[e]=D._jQueryInterface,$.fn[e].Constructor=D,$.fn[e].noConflict=function(){return $.fn[e]=i,D._jQueryInterface},D}($);function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var Collapse=function(){var e="collapse",l="bs.collapse",t="."+l,n=$.fn[e],r={toggle:!0,parent:""},i={toggle:"boolean",parent:"(string|element)"},c={SHOW:"show"+t,SHOWN:"shown"+t,HIDE:"hide"+t,HIDDEN:"hidden"+t,CLICK_DATA_API:"click"+t+".data-api"},u="show",h="collapse",d="collapsing",f="collapsed",o="width",s="height",p=".show, .collapsing",g='[data-toggle="collapse"]',a=function(){function a(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=$.makeArray($('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=$(g),i=0;i<n.length;i++){var r=n[i],o=Util.getSelectorFromElement(r);null!==o&&0<$(o).filter(t).length&&this._triggerArray.push(r)}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t=a.prototype;return t.toggle=function(){$(this._element).hasClass(u)?this.hide():this.show()},t.show=function(){var t,e,n=this;if(!this._isTransitioning&&!$(this._element).hasClass(u)&&(this._parent&&((t=$.makeArray($(this._parent).children().children(p))).length||(t=null)),!(t&&(e=$(t).data(l))&&e._isTransitioning))){var i=$.Event(c.SHOW);if($(this._element).trigger(i),!i.isDefaultPrevented()){t&&(a._jQueryInterface.call($(t),"hide"),e||$(t).data(l,null));var r=this._getDimension();$(this._element).removeClass(h).addClass(d),this._element.style[r]=0,this._triggerArray.length&&$(this._triggerArray).removeClass(f).attr("aria-expanded",!0),this.setTransitioning(!0);var o=function(){$(n._element).removeClass(d).addClass(h).addClass(u),n._element.style[r]="",n.setTransitioning(!1),$(n._element).trigger(c.SHOWN)};if(Util.supportsTransitionEnd()){var s="scroll"+(r[0].toUpperCase()+r.slice(1));$(this._element).one(Util.TRANSITION_END,o).emulateTransitionEnd(600),this._element.style[r]=this._element[s]+"px"}else o()}}},t.hide=function(){var t=this;if(!this._isTransitioning&&$(this._element).hasClass(u)){var e=$.Event(c.HIDE);if($(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension();if(this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",Util.reflow(this._element),$(this._element).addClass(d).removeClass(h).removeClass(u),this._triggerArray.length)for(var i=0;i<this._triggerArray.length;i++){var r=this._triggerArray[i],o=Util.getSelectorFromElement(r);if(null!==o)$(o).hasClass(u)||$(r).addClass(f).attr("aria-expanded",!1)}this.setTransitioning(!0);var s=function(){t.setTransitioning(!1),$(t._element).removeClass(d).addClass(h).trigger(c.HIDDEN)};this._element.style[n]="",Util.supportsTransitionEnd()?$(this._element).one(Util.TRANSITION_END,s).emulateTransitionEnd(600):s()}}},t.setTransitioning=function(t){this._isTransitioning=t},t.dispose=function(){$.removeData(this._element,l),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},t._getConfig=function(t){return(t=$.extend({},r,t)).toggle=Boolean(t.toggle),Util.typeCheckConfig(e,t,i),t},t._getDimension=function(){return $(this._element).hasClass(o)?o:s},t._getParent=function(){var n=this,t=null;Util.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=$(this._config.parent)[0];var e='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return $(t).find(e).each(function(t,e){n._addAriaAndCollapsedClass(a._getTargetFromElement(e),[e])}),t},t._addAriaAndCollapsedClass=function(t,e){if(t){var n=$(t).hasClass(u);e.length&&$(e).toggleClass(f,!n).attr("aria-expanded",n)}},a._getTargetFromElement=function(t){var e=Util.getSelectorFromElement(t);return e?$(e)[0]:null},a._jQueryInterface=function(i){return this.each(function(){var t=$(this),e=t.data(l),n=$.extend({},r,t.data(),"object"==typeof i&&i);if(!e&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),e||(e=new a(this,n),t.data(l,e)),"string"==typeof i){if(void 0===e[i])throw new Error('No method named "'+i+'"');e[i]()}})},_createClass(a,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return r}}]),a}();return $(document).on(c.CLICK_DATA_API,g,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=$(this),e=Util.getSelectorFromElement(this);$(e).each(function(){var t=$(this),e=t.data(l)?"toggle":n.data();a._jQueryInterface.call(t,e)})}),$.fn[e]=a._jQueryInterface,$.fn[e].Constructor=a,$.fn[e].noConflict=function(){return $.fn[e]=n,a._jQueryInterface},a}($);function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var Dropdown=function(){if("undefined"==typeof Popper)throw new Error("Bootstrap dropdown require Popper.js (https://popper.js.org)");var e="dropdown",c="bs.dropdown",n="."+c,t=".data-api",i=$.fn[e],s=new RegExp("38|40|27"),u={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,CLICK:"click"+n,CLICK_DATA_API:"click"+n+t,KEYDOWN_DATA_API:"keydown"+n+t,KEYUP_DATA_API:"keyup"+n+t},a="disabled",h="show",o="dropup",d="dropdown-menu-right",f="dropdown-menu-left",p='[data-toggle="dropdown"]',r=".dropdown form",g=".dropdown-menu",m=".navbar-nav",v=".dropdown-menu .dropdown-item:not(.disabled)",y="top-start",_="top-end",w="bottom-start",b="bottom-end",x={offset:0,flip:!0},C={offset:"(number|string|function)",flip:"boolean"},l=function(){function l(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var t=l.prototype;return t.toggle=function(){if(!this._element.disabled&&!$(this._element).hasClass(a)){var t=l._getParentFromElement(this._element),e=$(this._menu).hasClass(h);if(l._clearMenus(),!e){var n={relatedTarget:this._element},i=$.Event(u.SHOW,n);if($(t).trigger(i),!i.isDefaultPrevented()){var r=this._element;$(t).hasClass(o)&&($(this._menu).hasClass(f)||$(this._menu).hasClass(d))&&(r=t),this._popper=new Popper(r,this._menu,this._getPopperConfig()),"ontouchstart"in document.documentElement&&!$(t).closest(m).length&&$("body").children().on("mouseover",null,$.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),$(this._menu).toggleClass(h),$(t).toggleClass(h).trigger($.Event(u.SHOWN,n))}}}},t.dispose=function(){$.removeData(this._element,c),$(this._element).off(n),this._element=null,(this._menu=null)!==this._popper&&this._popper.destroy(),this._popper=null},t.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},t._addEventListeners=function(){var e=this;$(this._element).on(u.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},t._getConfig=function(t){return t=$.extend({},this.constructor.Default,$(this._element).data(),t),Util.typeCheckConfig(e,t,this.constructor.DefaultType),t},t._getMenuElement=function(){if(!this._menu){var t=l._getParentFromElement(this._element);this._menu=$(t).find(g)[0]}return this._menu},t._getPlacement=function(){var t=$(this._element).parent(),e=w;return t.hasClass(o)?(e=y,$(this._menu).hasClass(d)&&(e=_)):$(this._menu).hasClass(d)&&(e=b),e},t._detectNavbar=function(){return 0<$(this._element).closest(".navbar").length},t._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=$.extend({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip}}};return this._inNavbar&&(n.modifiers.applyStyle={enabled:!this._inNavbar}),n},l._jQueryInterface=function(e){return this.each(function(){var t=$(this).data(c);if(t||(t=new l(this,"object"==typeof e?e:null),$(this).data(c,t)),"string"==typeof e){if(void 0===t[e])throw new Error('No method named "'+e+'"');t[e]()}})},l._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var e=$.makeArray($(p)),n=0;n<e.length;n++){var i=l._getParentFromElement(e[n]),r=$(e[n]).data(c),o={relatedTarget:e[n]};if(r){var s=r._menu;if($(i).hasClass(h)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&$.contains(i,t.target))){var a=$.Event(u.HIDE,o);$(i).trigger(a),a.isDefaultPrevented()||("ontouchstart"in document.documentElement&&$("body").children().off("mouseover",null,$.noop),e[n].setAttribute("aria-expanded","false"),$(s).removeClass(h),$(i).removeClass(h).trigger($.Event(u.HIDDEN,o)))}}}},l._getParentFromElement=function(t){var e,n=Util.getSelectorFromElement(t);return n&&(e=$(n)[0]),e||t.parentNode},l._dataApiKeydownHandler=function(t){if(!(!s.test(t.which)||/button/i.test(t.target.tagName)&&32===t.which||/input|textarea/i.test(t.target.tagName)||(t.preventDefault(),t.stopPropagation(),this.disabled||$(this).hasClass(a)))){var e=l._getParentFromElement(this),n=$(e).hasClass(h);if((n||27===t.which&&32===t.which)&&(!n||27!==t.which&&32!==t.which)){var i=$(e).find(v).get();if(i.length){var r=i.indexOf(t.target);38===t.which&&0<r&&r--,40===t.which&&r<i.length-1&&r++,r<0&&(r=0),i[r].focus()}}else{if(27===t.which){var o=$(e).find(p)[0];$(o).trigger("focus")}$(this).trigger("click")}}},_createClass(l,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return x}},{key:"DefaultType",get:function(){return C}}]),l}();return $(document).on(u.KEYDOWN_DATA_API,p,l._dataApiKeydownHandler).on(u.KEYDOWN_DATA_API,g,l._dataApiKeydownHandler).on(u.CLICK_DATA_API+" "+u.KEYUP_DATA_API,l._clearMenus).on(u.CLICK_DATA_API,p,function(t){t.preventDefault(),t.stopPropagation(),l._jQueryInterface.call($(this),"toggle")}).on(u.CLICK_DATA_API,r,function(t){t.stopPropagation()}),$.fn[e]=l._jQueryInterface,$.fn[e].Constructor=l,$.fn[e].noConflict=function(){return $.fn[e]=i,l._jQueryInterface},l}($,Popper);function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var Modal=function(){var e="modal",s="bs.modal",n="."+s,t=$.fn[e],i={backdrop:!0,keyboard:!0,focus:!0,show:!0},o={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},a={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,FOCUSIN:"focusin"+n,RESIZE:"resize"+n,CLICK_DISMISS:"click.dismiss"+n,KEYDOWN_DISMISS:"keydown.dismiss"+n,MOUSEUP_DISMISS:"mouseup.dismiss"+n,MOUSEDOWN_DISMISS:"mousedown.dismiss"+n,CLICK_DATA_API:"click"+n+".data-api"},l="modal-scrollbar-measure",c="modal-backdrop",u="modal-open",h="fade",d="show",f=".modal-dialog",r='[data-toggle="modal"]',p='[data-dismiss="modal"]',g=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",m=".sticky-top",v=".navbar-toggler",y=function(){function r(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=$(t).find(f)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}var t=r.prototype;return t.toggle=function(t){return this._isShown?this.hide():this.show(t)},t.show=function(t){var e=this;if(!this._isTransitioning&&!this._isShown){Util.supportsTransitionEnd()&&$(this._element).hasClass(h)&&(this._isTransitioning=!0);var n=$.Event(a.SHOW,{relatedTarget:t});$(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),$(document.body).addClass(u),this._setEscapeEvent(),this._setResizeEvent(),$(this._element).on(a.CLICK_DISMISS,p,function(t){return e.hide(t)}),$(this._dialog).on(a.MOUSEDOWN_DISMISS,function(){$(e._element).one(a.MOUSEUP_DISMISS,function(t){$(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))}},t.hide=function(t){var e=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var n=$.Event(a.HIDE);if($(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var i=Util.supportsTransitionEnd()&&$(this._element).hasClass(h);i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),$(document).off(a.FOCUSIN),$(this._element).removeClass(d),$(this._element).off(a.CLICK_DISMISS),$(this._dialog).off(a.MOUSEDOWN_DISMISS),i?$(this._element).one(Util.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(300):this._hideModal()}}},t.dispose=function(){$.removeData(this._element,s),$(window,document,this._element,this._backdrop).off(n),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},t.handleUpdate=function(){this._adjustDialog()},t._getConfig=function(t){return t=$.extend({},i,t),Util.typeCheckConfig(e,t,o),t},t._showElement=function(t){var e=this,n=Util.supportsTransitionEnd()&&$(this._element).hasClass(h);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&Util.reflow(this._element),$(this._element).addClass(d),this._config.focus&&this._enforceFocus();var i=$.Event(a.SHOWN,{relatedTarget:t}),r=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,$(e._element).trigger(i)};n?$(this._dialog).one(Util.TRANSITION_END,r).emulateTransitionEnd(300):r()},t._enforceFocus=function(){var e=this;$(document).off(a.FOCUSIN).on(a.FOCUSIN,function(t){document===t.target||e._element===t.target||$(e._element).has(t.target).length||e._element.focus()})},t._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?$(this._element).on(a.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||$(this._element).off(a.KEYDOWN_DISMISS)},t._setResizeEvent=function(){var e=this;this._isShown?$(window).on(a.RESIZE,function(t){return e.handleUpdate(t)}):$(window).off(a.RESIZE)},t._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){$(document.body).removeClass(u),t._resetAdjustments(),t._resetScrollbar(),$(t._element).trigger(a.HIDDEN)})},t._removeBackdrop=function(){this._backdrop&&($(this._backdrop).remove(),this._backdrop=null)},t._showBackdrop=function(t){var e=this,n=$(this._element).hasClass(h)?h:"";if(this._isShown&&this._config.backdrop){var i=Util.supportsTransitionEnd()&&n;if(this._backdrop=document.createElement("div"),this._backdrop.className=c,n&&$(this._backdrop).addClass(n),$(this._backdrop).appendTo(document.body),$(this._element).on(a.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide())}),i&&Util.reflow(this._backdrop),$(this._backdrop).addClass(d),!t)return;if(!i)return void t();$(this._backdrop).one(Util.TRANSITION_END,t).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){$(this._backdrop).removeClass(d);var r=function(){e._removeBackdrop(),t&&t()};Util.supportsTransitionEnd()&&$(this._element).hasClass(h)?$(this._backdrop).one(Util.TRANSITION_END,r).emulateTransitionEnd(150):r()}else t&&t()},t._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},t._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},t._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},t._setScrollbar=function(){var r=this;if(this._isBodyOverflowing){$(g).each(function(t,e){var n=$(e)[0].style.paddingRight,i=$(e).css("padding-right");$(e).data("padding-right",n).css("padding-right",parseFloat(i)+r._scrollbarWidth+"px")}),$(m).each(function(t,e){var n=$(e)[0].style.marginRight,i=$(e).css("margin-right");$(e).data("margin-right",n).css("margin-right",parseFloat(i)-r._scrollbarWidth+"px")}),$(v).each(function(t,e){var n=$(e)[0].style.marginRight,i=$(e).css("margin-right");$(e).data("margin-right",n).css("margin-right",parseFloat(i)+r._scrollbarWidth+"px")});var t=document.body.style.paddingRight,e=$("body").css("padding-right");$("body").data("padding-right",t).css("padding-right",parseFloat(e)+this._scrollbarWidth+"px")}},t._resetScrollbar=function(){$(g).each(function(t,e){var n=$(e).data("padding-right");void 0!==n&&$(e).css("padding-right",n).removeData("padding-right")}),$(m+", "+v).each(function(t,e){var n=$(e).data("margin-right");void 0!==n&&$(e).css("margin-right",n).removeData("margin-right")});var t=$("body").data("padding-right");void 0!==t&&$("body").css("padding-right",t).removeData("padding-right")},t._getScrollbarWidth=function(){var t=document.createElement("div");t.className=l,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},r._jQueryInterface=function(n,i){return this.each(function(){var t=$(this).data(s),e=$.extend({},r.Default,$(this).data(),"object"==typeof n&&n);if(t||(t=new r(this,e),$(this).data(s,t)),"string"==typeof n){if(void 0===t[n])throw new Error('No method named "'+n+'"');t[n](i)}else e.show&&t.show(i)})},_createClass(r,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return i}}]),r}();return $(document).on(a.CLICK_DATA_API,r,function(t){var e,n=this,i=Util.getSelectorFromElement(this);i&&(e=$(i)[0]);var r=$(e).data(s)?"toggle":$.extend({},$(e).data(),$(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var o=$(e).one(a.SHOW,function(t){t.isDefaultPrevented()||o.one(a.HIDDEN,function(){$(n).is(":visible")&&n.focus()})});y._jQueryInterface.call($(e),r,this)}),$.fn[e]=y._jQueryInterface,$.fn[e].Constructor=y,$.fn[e].noConflict=function(){return $.fn[e]=t,y._jQueryInterface},y}($);function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var ScrollSpy=function(){var i="scrollspy",r="bs.scrollspy",e="."+r,t=$.fn[i],o={offset:10,method:"auto",target:""},s={offset:"number",method:"string",target:"(string|element)"},a={ACTIVATE:"activate"+e,SCROLL:"scroll"+e,LOAD_DATA_API:"load"+e+".data-api"},l="dropdown-item",c="active",u='[data-spy="scroll"]',h=".active",d=".nav, .list-group",f=".nav-link",p=".nav-item",g=".list-group-item",m=".dropdown",v=".dropdown-item",y=".dropdown-toggle",_="offset",w="position",b=function(){function n(t,e){var n=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+f+","+this._config.target+" "+g+","+this._config.target+" "+v,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,$(this._scrollElement).on(a.SCROLL,function(t){return n._process(t)}),this.refresh(),this._process()}var t=n.prototype;return t.refresh=function(){var e=this,t=this._scrollElement!==this._scrollElement.window?w:_,r="auto"===this._config.method?t:this._config.method,o=r===w?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),$.makeArray($(this._selector)).map(function(t){var e,n=Util.getSelectorFromElement(t);if(n&&(e=$(n)[0]),e){var i=e.getBoundingClientRect();if(i.width||i.height)return[$(e)[r]().top+o,n]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},t.dispose=function(){$.removeData(this._element,r),$(this._scrollElement).off(e),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},t._getConfig=function(t){if("string"!=typeof(t=$.extend({},o,t)).target){var e=$(t.target).attr("id");e||(e=Util.getUID(i),$(t.target).attr("id",e)),t.target="#"+e}return Util.typeCheckConfig(i,t,s),t},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},t._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;){this._activeTarget!==this._targets[r]&&t>=this._offsets[r]&&(void 0===this._offsets[r+1]||t<this._offsets[r+1])&&this._activate(this._targets[r])}}},t._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",");t=t.map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'});var n=$(t.join(","));n.hasClass(l)?(n.closest(m).find(y).addClass(c),n.addClass(c)):(n.addClass(c),n.parents(d).prev(f+", "+g).addClass(c),n.parents(d).prev(p).children(f).addClass(c)),$(this._scrollElement).trigger(a.ACTIVATE,{relatedTarget:e})},t._clear=function(){$(this._selector).filter(h).removeClass(c)},n._jQueryInterface=function(e){return this.each(function(){var t=$(this).data(r);if(t||(t=new n(this,"object"==typeof e&&e),$(this).data(r,t)),"string"==typeof e){if(void 0===t[e])throw new Error('No method named "'+e+'"');t[e]()}})},_createClass(n,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return o}}]),n}();return $(window).on(a.LOAD_DATA_API,function(){for(var t=$.makeArray($(u)),e=t.length;e--;){var n=$(t[e]);b._jQueryInterface.call(n,n.data())}}),$.fn[i]=b._jQueryInterface,$.fn[i].Constructor=b,$.fn[i].noConflict=function(){return $.fn[i]=t,b._jQueryInterface},b}($);function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var Tab=function(){var r="bs.tab",t="."+r,e=$.fn.tab,c={HIDE:"hide"+t,HIDDEN:"hidden"+t,SHOW:"show"+t,SHOWN:"shown"+t,CLICK_DATA_API:"click"+t+".data-api"},s="dropdown-menu",u="active",h="disabled",a="fade",l="show",d=".dropdown",f=".nav, .list-group",p=".active",g="> li > .active",n='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',m=".dropdown-toggle",v="> .dropdown-menu .active",i=function(){function i(t){this._element=t}var t=i.prototype;return t.show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&$(this._element).hasClass(u)||$(this._element).hasClass(h))){var t,i,e=$(this._element).closest(f)[0],r=Util.getSelectorFromElement(this._element);if(e){var o="UL"===e.nodeName?g:p;i=(i=$.makeArray($(e).find(o)))[i.length-1]}var s=$.Event(c.HIDE,{relatedTarget:this._element}),a=$.Event(c.SHOW,{relatedTarget:i});if(i&&$(i).trigger(s),$(this._element).trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){r&&(t=$(r)[0]),this._activate(this._element,e);var l=function(){var t=$.Event(c.HIDDEN,{relatedTarget:n._element}),e=$.Event(c.SHOWN,{relatedTarget:i});$(i).trigger(t),$(n._element).trigger(e)};t?this._activate(t,t.parentNode,l):l()}}},t.dispose=function(){$.removeData(this._element,r),this._element=null},t._activate=function(t,e,n){var i=this,r=("UL"===e.nodeName?$(e).find(g):$(e).children(p))[0],o=n&&Util.supportsTransitionEnd()&&r&&$(r).hasClass(a),s=function(){return i._transitionComplete(t,r,o,n)};r&&o?$(r).one(Util.TRANSITION_END,s).emulateTransitionEnd(150):s(),r&&$(r).removeClass(l)},t._transitionComplete=function(t,e,n,i){if(e){$(e).removeClass(u);var r=$(e.parentNode).find(v)[0];r&&$(r).removeClass(u),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}if($(t).addClass(u),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),n?(Util.reflow(t),$(t).addClass(l)):$(t).removeClass(a),t.parentNode&&$(t.parentNode).hasClass(s)){var o=$(t).closest(d)[0];o&&$(o).find(m).addClass(u),t.setAttribute("aria-expanded",!0)}i&&i()},i._jQueryInterface=function(n){return this.each(function(){var t=$(this),e=t.data(r);if(e||(e=new i(this),t.data(r,e)),"string"==typeof n){if(void 0===e[n])throw new Error('No method named "'+n+'"');e[n]()}})},_createClass(i,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}}]),i}();return $(document).on(c.CLICK_DATA_API,n,function(t){t.preventDefault(),i._jQueryInterface.call($(this),"show")}),$.fn.tab=i._jQueryInterface,$.fn.tab.Constructor=i,$.fn.tab.noConflict=function(){return $.fn.tab=e,i._jQueryInterface},i}($);function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var Tooltip=function(){if("undefined"==typeof Popper)throw new Error("Bootstrap tooltips require Popper.js (https://popper.js.org)");var e="tooltip",i="bs.tooltip",n="."+i,t=$.fn[e],r="bs-tooltip",o=new RegExp("(^|\\s)"+r+"\\S+","g"),s={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)"},a={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},l={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip"},u="show",h="out",d={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},f="fade",p="show",g=".tooltip-inner",m=".arrow",v="hover",y="focus",_="click",w="manual",c=function(){function c(t,e){this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var t=c.prototype;return t.enable=function(){this._isEnabled=!0},t.disable=function(){this._isEnabled=!1},t.toggleEnabled=function(){this._isEnabled=!this._isEnabled},t.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,n=$(t.currentTarget).data(e);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),$(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if($(this.getTipElement()).hasClass(p))return void this._leave(null,this);this._enter(null,this)}},t.dispose=function(){clearTimeout(this._timeout),$.removeData(this.element,this.constructor.DATA_KEY),$(this.element).off(this.constructor.EVENT_KEY),$(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&$(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},t.show=function(){var e=this;if("none"===$(this.element).css("display"))throw new Error("Please use show on visible elements");var t=$.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){$(this.element).trigger(t);var n=$.contains(this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!n)return;var i=this.getTipElement(),r=Util.getUID(this.constructor.NAME);i.setAttribute("id",r),this.element.setAttribute("aria-describedby",r),this.setContent(),this.config.animation&&$(i).addClass(f);var o="function"==typeof this.config.placement?this.config.placement.call(this,i,this.element):this.config.placement,s=this._getAttachment(o);this.addAttachmentClass(s);var a=!1===this.config.container?document.body:$(this.config.container);$(i).data(this.constructor.DATA_KEY,this),$.contains(this.element.ownerDocument.documentElement,this.tip)||$(i).appendTo(a),$(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new Popper(this.element,i,{placement:s,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:m}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),$(i).addClass(p),"ontouchstart"in document.documentElement&&$("body").children().on("mouseover",null,$.noop);var l=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,$(e.element).trigger(e.constructor.Event.SHOWN),t===h&&e._leave(null,e)};Util.supportsTransitionEnd()&&$(this.tip).hasClass(f)?$(this.tip).one(Util.TRANSITION_END,l).emulateTransitionEnd(c._TRANSITION_DURATION):l()}},t.hide=function(t){var e=this,n=this.getTipElement(),i=$.Event(this.constructor.Event.HIDE),r=function(){e._hoverState!==u&&n.parentNode&&n.parentNode.removeChild(n),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),$(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};$(this.element).trigger(i),i.isDefaultPrevented()||($(n).removeClass(p),"ontouchstart"in document.documentElement&&$("body").children().off("mouseover",null,$.noop),this._activeTrigger[_]=!1,this._activeTrigger[y]=!1,this._activeTrigger[v]=!1,Util.supportsTransitionEnd()&&$(this.tip).hasClass(f)?$(n).one(Util.TRANSITION_END,r).emulateTransitionEnd(150):r(),this._hoverState="")},t.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},t.isWithContent=function(){return Boolean(this.getTitle())},t.addAttachmentClass=function(t){$(this.getTipElement()).addClass(r+"-"+t)},t.getTipElement=function(){return this.tip=this.tip||$(this.config.template)[0],this.tip},t.setContent=function(){var t=$(this.getTipElement());this.setElementContent(t.find(g),this.getTitle()),t.removeClass(f+" "+p)},t.setElementContent=function(t,e){var n=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?n?$(e).parent().is(t)||t.empty().append(e):t.text($(e).text()):t[n?"html":"text"](e)},t.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},t._getAttachment=function(t){return a[t.toUpperCase()]},t._setListeners=function(){var i=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)$(i.element).on(i.constructor.Event.CLICK,i.config.selector,function(t){return i.toggle(t)});else if(t!==w){var e=t===v?i.constructor.Event.MOUSEENTER:i.constructor.Event.FOCUSIN,n=t===v?i.constructor.Event.MOUSELEAVE:i.constructor.Event.FOCUSOUT;$(i.element).on(e,i.config.selector,function(t){return i._enter(t)}).on(n,i.config.selector,function(t){return i._leave(t)})}$(i.element).closest(".modal").on("hide.bs.modal",function(){return i.hide()})}),this.config.selector?this.config=$.extend({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},t._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},t._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||$(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),$(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?y:v]=!0),$(e.getTipElement()).hasClass(p)||e._hoverState===u?e._hoverState=u:(clearTimeout(e._timeout),e._hoverState=u,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===u&&e.show()},e.config.delay.show):e.show())},t._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||$(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),$(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?y:v]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=h,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===h&&e.hide()},e.config.delay.hide):e.hide())},t._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},t._getConfig=function(t){return"number"==typeof(t=$.extend({},this.constructor.Default,$(this.element).data(),t)).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),Util.typeCheckConfig(e,t,this.constructor.DefaultType),t},t._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},t._cleanTipClass=function(){var t=$(this.getTipElement()),e=t.attr("class").match(o);null!==e&&0<e.length&&t.removeClass(e.join(""))},t._handlePopperPlacementChange=function(t){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},t._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&($(t).removeClass(f),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},c._jQueryInterface=function(n){return this.each(function(){var t=$(this).data(i),e="object"==typeof n&&n;if((t||!/dispose|hide/.test(n))&&(t||(t=new c(this,e),$(this).data(i,t)),"string"==typeof n)){if(void 0===t[n])throw new Error('No method named "'+n+'"');t[n]()}})},_createClass(c,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return l}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return i}},{key:"Event",get:function(){return d}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return s}}]),c}();return $.fn[e]=c._jQueryInterface,$.fn[e].Constructor=c,$.fn[e].noConflict=function(){return $.fn[e]=t,c._jQueryInterface},c}($,Popper);function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function _inheritsLoose(t,e){t.prototype=Object.create(e.prototype),(t.prototype.constructor=t).__proto__=e}var Popover=function(){var n="popover",r="bs.popover",o="."+r,t=$.fn[n],s="bs-popover",a=new RegExp("(^|\\s)"+s+"\\S+","g"),l=$.extend({},Tooltip.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),c=$.extend({},Tooltip.DefaultType,{content:"(string|element|function)"}),u="fade",h="show",d=".popover-header",f=".popover-body",p={HIDE:"hide"+o,HIDDEN:"hidden"+o,SHOW:"show"+o,SHOWN:"shown"+o,INSERTED:"inserted"+o,CLICK:"click"+o,FOCUSIN:"focusin"+o,FOCUSOUT:"focusout"+o,MOUSEENTER:"mouseenter"+o,MOUSELEAVE:"mouseleave"+o},e=function(t){function i(){return t.apply(this,arguments)||this}_inheritsLoose(i,t);var e=i.prototype;return e.isWithContent=function(){return this.getTitle()||this._getContent()},e.addAttachmentClass=function(t){$(this.getTipElement()).addClass(s+"-"+t)},e.getTipElement=function(){return this.tip=this.tip||$(this.config.template)[0],this.tip},e.setContent=function(){var t=$(this.getTipElement());this.setElementContent(t.find(d),this.getTitle()),this.setElementContent(t.find(f),this._getContent()),t.removeClass(u+" "+h)},e._getContent=function(){return this.element.getAttribute("data-content")||("function"==typeof this.config.content?this.config.content.call(this.element):this.config.content)},e._cleanTipClass=function(){var t=$(this.getTipElement()),e=t.attr("class").match(a);null!==e&&0<e.length&&t.removeClass(e.join(""))},i._jQueryInterface=function(n){return this.each(function(){var t=$(this).data(r),e="object"==typeof n?n:null;if((t||!/destroy|hide/.test(n))&&(t||(t=new i(this,e),$(this).data(r,t)),"string"==typeof n)){if(void 0===t[n])throw new Error('No method named "'+n+'"');t[n]()}})},_createClass(i,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return l}},{key:"NAME",get:function(){return n}},{key:"DATA_KEY",get:function(){return r}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return o}},{key:"DefaultType",get:function(){return c}}]),i}(Tooltip);return $.fn[n]=e._jQueryInterface,$.fn[n].Constructor=e,$.fn[n].noConflict=function(){return $.fn[n]=t,e._jQueryInterface},e}($);!function(l,n,r,a){function c(t,e){this.settings=null,this.options=l.extend({},c.Defaults,e),this.$element=l(t),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},l.each(["onResize","onThrottledResize"],l.proxy(function(t,e){this._handlers[e]=l.proxy(this[e],this)},this)),l.each(c.Plugins,l.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),l.each(c.Workers,l.proxy(function(t,e){this._pipe.push({filter:e.filter,run:l.proxy(e.run,this)})},this)),this.setup(),this.initialize()}c.Defaults={items:3,loop:!1,center:!1,rewind:!1,checkVisibility:!0,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:n,fallbackEasing:"swing",slideTransition:"",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},c.Width={Default:"default",Inner:"inner",Outer:"outer"},c.Type={Event:"event",State:"state"},c.Plugins={},c.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",n=!this.settings.autoWidth,i=this.settings.rtl,r={width:"auto","margin-left":i?e:"","margin-right":i?"":e};!n&&this.$stage.children().css(r),t.css=r}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,n=null,i=this._items.length,r=!this.settings.autoWidth,o=[];for(t.items={merge:!1,width:e};i--;)n=this._mergers[i],n=this.settings.mergeFit&&Math.min(n,this.settings.items)||n,t.items.merge=1<n||t.items.merge,o[i]=r?e*n:this._items[i].width();this._widths=o}},{filter:["items","settings"],run:function(){var t=[],e=this._items,n=this.settings,i=Math.max(2*n.items,4),r=2*Math.ceil(e.length/2),o=n.loop&&e.length?n.rewind?i:Math.max(i,r):0,s="",a="";for(o/=2;0<o;)t.push(this.normalize(t.length/2,!0)),s+=e[t[t.length-1]][0].outerHTML,t.push(this.normalize(e.length-1-(t.length-1)/2,!0)),a=e[t[t.length-1]][0].outerHTML+a,o-=1;this._clones=t,l(s).addClass("cloned").appendTo(this.$stage),l(a).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,n=-1,i=0,r=0,o=[];++n<e;)i=o[n-1]||0,r=this._widths[this.relative(n)]+this.settings.margin,o.push(i+r*t);this._coordinates=o}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,n={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(n)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,n=!this.settings.autoWidth,i=this.$stage.children();if(n&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],i.eq(e).css(t.css);else n&&(t.css.width=t.items.width,i.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,n,i,r=this.settings.rtl?1:-1,o=2*this.settings.stagePadding,s=this.coordinates(this.current())+o,a=s+this.width()*r,l=[];for(n=0,i=this._coordinates.length;n<i;n++)t=this._coordinates[n-1]||0,e=Math.abs(this._coordinates[n])+o*r,(this.op(t,"<=",s)&&this.op(t,">",a)||this.op(e,"<",s)&&this.op(e,">",a))&&l.push(n);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.$stage.children(".center").removeClass("center"),this.settings.center&&this.$stage.children().eq(this.current()).addClass("center")}}],c.prototype.initializeStage=function(){this.$stage=this.$element.find("."+this.settings.stageClass),this.$stage.length||(this.$element.addClass(this.options.loadingClass),this.$stage=l("<"+this.settings.stageElement+">",{class:this.settings.stageClass}).wrap(l("<div/>",{class:this.settings.stageOuterClass})),this.$element.append(this.$stage.parent()))},c.prototype.initializeItems=function(){var t=this.$element.find(".owl-item");if(t.length)return this._items=t.get().map(function(t){return l(t)}),this._mergers=this._items.map(function(){return 1}),void this.refresh();this.replace(this.$element.children().not(this.$stage.parent())),this.isVisible()?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass)},c.prototype.initialize=function(){var t,e,n;(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading"))&&(t=this.$element.find("img"),e=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:a,n=this.$element.children(e).width(),t.length&&n<=0&&this.preloadAutoWidthImages(t));this.initializeStage(),this.initializeItems(),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},c.prototype.isVisible=function(){return!this.settings.checkVisibility||this.$element.is(":visible")},c.prototype.setup=function(){var e=this.viewport(),t=this.options.responsive,n=-1,i=null;t?(l.each(t,function(t){t<=e&&n<t&&(n=Number(t))}),"function"==typeof(i=l.extend({},this.options,t[n])).stagePadding&&(i.stagePadding=i.stagePadding()),delete i.responsive,i.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+n))):i=l.extend({},this.options),this.trigger("change",{property:{name:"settings",value:i}}),this._breakpoint=n,this.settings=i,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},c.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},c.prototype.prepare=function(t){var e=this.trigger("prepare",{content:t});return e.data||(e.data=l("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(t)),this.trigger("prepared",{content:e.data}),e.data},c.prototype.update=function(){for(var t=0,e=this._pipe.length,n=l.proxy(function(t){return this[t]},this._invalidated),i={};t<e;)(this._invalidated.all||0<l.grep(this._pipe[t].filter,n).length)&&this._pipe[t].run(i),t++;this._invalidated={},!this.is("valid")&&this.enter("valid")},c.prototype.width=function(t){switch(t=t||c.Width.Default){case c.Width.Inner:case c.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},c.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},c.prototype.onThrottledResize=function(){n.clearTimeout(this.resizeTimer),this.resizeTimer=n.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},c.prototype.onResize=function(){return!!this._items.length&&this._width!==this.$element.width()&&!!this.isVisible()&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))},c.prototype.registerEventHandlers=function(){l.support.transition&&this.$stage.on(l.support.transition.end+".owl.core",l.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(n,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",l.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",l.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",l.proxy(this.onDragEnd,this)))},c.prototype.onDragStart=function(t){var e=null;3!==t.which&&(e=l.support.transform?{x:(e=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","))[16===e.length?12:4],y:e[16===e.length?13:5]}:(e=this.$stage.position(),{x:this.settings.rtl?e.left+this.$stage.width()-this.width()+this.settings.margin:e.left,y:e.top}),this.is("animating")&&(l.support.transform?this.animate(e.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===t.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=l(t.target),this._drag.stage.start=e,this._drag.stage.current=e,this._drag.pointer=this.pointer(t),l(r).on("mouseup.owl.core touchend.owl.core",l.proxy(this.onDragEnd,this)),l(r).one("mousemove.owl.core touchmove.owl.core",l.proxy(function(t){var e=this.difference(this._drag.pointer,this.pointer(t));l(r).on("mousemove.owl.core touchmove.owl.core",l.proxy(this.onDragMove,this)),Math.abs(e.x)<Math.abs(e.y)&&this.is("valid")||(t.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},c.prototype.onDragMove=function(t){var e=null,n=null,i=null,r=this.difference(this._drag.pointer,this.pointer(t)),o=this.difference(this._drag.stage.start,r);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),n=this.coordinates(this.maximum()+1)-e,o.x=((o.x-e)%n+n)%n+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),n=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),i=this.settings.pullDrag?-1*r.x/5:0,o.x=Math.max(Math.min(o.x,e+i),n+i)),this._drag.stage.current=o,this.animate(o.x))},c.prototype.onDragEnd=function(t){var e=this.difference(this._drag.pointer,this.pointer(t)),n=this._drag.stage.current,i=0<e.x^this.settings.rtl?"left":"right";l(r).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==e.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(n.x,0!==e.x?i:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=i,(3<Math.abs(e.x)||300<(new Date).getTime()-this._drag.time)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},c.prototype.closest=function(n,i){var r=-1,o=this.width(),s=this.coordinates();return this.settings.freeDrag||l.each(s,l.proxy(function(t,e){return"left"===i&&e-30<n&&n<e+30?r=t:"right"===i&&e-o-30<n&&n<e-o+30?r=t+1:this.op(n,"<",e)&&this.op(n,">",s[t+1]!==a?s[t+1]:e-o)&&(r="left"===i?t+1:t),-1===r},this)),this.settings.loop||(this.op(n,">",s[this.minimum()])?r=n=this.minimum():this.op(n,"<",s[this.maximum()])&&(r=n=this.maximum())),r},c.prototype.animate=function(t){var e=0<this.speed();this.is("animating")&&this.onTransitionEnd(),e&&(this.enter("animating"),this.trigger("translate")),l.support.transform3d&&l.support.transition?this.$stage.css({transform:"translate3d("+t+"px,0px,0px)",transition:this.speed()/1e3+"s"+(this.settings.slideTransition?" "+this.settings.slideTransition:"")}):e?this.$stage.animate({left:t+"px"},this.speed(),this.settings.fallbackEasing,l.proxy(this.onTransitionEnd,this)):this.$stage.css({left:t+"px"})},c.prototype.is=function(t){return this._states.current[t]&&0<this._states.current[t]},c.prototype.current=function(t){if(t===a)return this._current;if(0===this._items.length)return a;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==a&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},c.prototype.invalidate=function(t){return"string"===l.type(t)&&(this._invalidated[t]=!0,this.is("valid")&&this.leave("valid")),l.map(this._invalidated,function(t,e){return e})},c.prototype.reset=function(t){(t=this.normalize(t))!==a&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},c.prototype.normalize=function(t,e){var n=this._items.length,i=e?0:this._clones.length;return!this.isNumeric(t)||n<1?t=a:(t<0||n+i<=t)&&(t=((t-i/2)%n+n)%n+i/2),t},c.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},c.prototype.maximum=function(t){var e,n,i,r=this.settings,o=this._coordinates.length;if(r.loop)o=this._clones.length/2+this._items.length-1;else if(r.autoWidth||r.merge){if(e=this._items.length)for(n=this._items[--e].width(),i=this.$element.width();e--&&!((n+=this._items[e].width()+this.settings.margin)>i););o=e+1}else o=r.center?this._items.length-1:this._items.length-r.items;return t&&(o-=this._clones.length/2),Math.max(o,0)},c.prototype.minimum=function(t){return t?0:this._clones.length/2},c.prototype.items=function(t){return t===a?this._items.slice():(t=this.normalize(t,!0),this._items[t])},c.prototype.mergers=function(t){return t===a?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},c.prototype.clones=function(n){var e=this._clones.length/2,i=e+this._items.length,r=function(t){return t%2==0?i+t/2:e-(t+1)/2};return n===a?l.map(this._clones,function(t,e){return r(e)}):l.map(this._clones,function(t,e){return t===n?r(e):null})},c.prototype.speed=function(t){return t!==a&&(this._speed=t),this._speed},c.prototype.coordinates=function(t){var e,n=1,i=t-1;return t===a?l.map(this._coordinates,l.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(n=-1,i=t+1),e=this._coordinates[t],e+=(this.width()-e+(this._coordinates[i]||0))/2*n):e=this._coordinates[i]||0,e=Math.ceil(e))},c.prototype.duration=function(t,e,n){return 0===n?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(n||this.settings.smartSpeed)},c.prototype.to=function(t,e){var n=this.current(),i=null,r=t-this.relative(n),o=(0<r)-(r<0),s=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(r)>s/2&&(r+=-1*o*s),(i=(((t=n+r)-a)%s+s)%s+a)!==t&&i-r<=l&&0<i-r&&(n=i-r,t=i,this.reset(n))):t=this.settings.rewind?(t%(l+=1)+l)%l:Math.max(a,Math.min(l,t)),this.speed(this.duration(n,t,e)),this.current(t),this.isVisible()&&this.update()},c.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},c.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},c.prototype.onTransitionEnd=function(t){if(t!==a&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},c.prototype.viewport=function(){var t;return this.options.responsiveBaseElement!==n?t=l(this.options.responsiveBaseElement).width():n.innerWidth?t=n.innerWidth:r.documentElement&&r.documentElement.clientWidth?t=r.documentElement.clientWidth:console.warn("Can not detect viewport width."),t},c.prototype.replace=function(t){this.$stage.empty(),this._items=[],t&&(t=t instanceof jQuery?t:l(t)),this.settings.nestedItemSelector&&(t=t.find("."+this.settings.nestedItemSelector)),t.filter(function(){return 1===this.nodeType}).each(l.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},c.prototype.add=function(t,e){var n=this.relative(this._current);e=e===a?this._items.length:this.normalize(e,!0),t=t instanceof jQuery?t:l(t),this.trigger("add",{content:t,position:e}),t=this.prepare(t),0===this._items.length||e===this._items.length?(0===this._items.length&&this.$stage.append(t),0!==this._items.length&&this._items[e-1].after(t),this._items.push(t),this._mergers.push(1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[e].before(t),this._items.splice(e,0,t),this._mergers.splice(e,0,1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[n]&&this.reset(this._items[n].index()),this.invalidate("items"),this.trigger("added",{content:t,position:e})},c.prototype.remove=function(t){(t=this.normalize(t,!0))!==a&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},c.prototype.preloadAutoWidthImages=function(t){t.each(l.proxy(function(t,e){this.enter("pre-loading"),e=l(e),l(new Image).one("load",l.proxy(function(t){e.attr("src",t.target.src),e.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",e.attr("src")||e.attr("data-src")||e.attr("data-src-retina"))},this))},c.prototype.destroy=function(){for(var t in this.$element.off(".owl.core"),this.$stage.off(".owl.core"),l(r).off(".owl.core"),!1!==this.settings.responsive&&(n.clearTimeout(this.resizeTimer),this.off(n,"resize",this._handlers.onThrottledResize)),this._plugins)this._plugins[t].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$stage.remove(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},c.prototype.op=function(t,e,n){var i=this.settings.rtl;switch(e){case"<":return i?n<t:t<n;case">":return i?t<n:n<t;case">=":return i?t<=n:n<=t;case"<=":return i?n<=t:t<=n}},c.prototype.on=function(t,e,n,i){t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&t.attachEvent("on"+e,n)},c.prototype.off=function(t,e,n,i){t.removeEventListener?t.removeEventListener(e,n,i):t.detachEvent&&t.detachEvent("on"+e,n)},c.prototype.trigger=function(t,e,n,i,r){var o={item:{count:this._items.length,index:this.current()}},s=l.camelCase(l.grep(["on",t,n],function(t){return t}).join("-").toLowerCase()),a=l.Event([t,"owl",n||"carousel"].join(".").toLowerCase(),l.extend({relatedTarget:this},o,e));return this._supress[t]||(l.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(a)}),this.register({type:c.Type.Event,name:t}),this.$element.trigger(a),this.settings&&"function"==typeof this.settings[s]&&this.settings[s].call(this,a)),a},c.prototype.enter=function(t){l.each([t].concat(this._states.tags[t]||[]),l.proxy(function(t,e){this._states.current[e]===a&&(this._states.current[e]=0),this._states.current[e]++},this))},c.prototype.leave=function(t){l.each([t].concat(this._states.tags[t]||[]),l.proxy(function(t,e){this._states.current[e]--},this))},c.prototype.register=function(n){if(n.type===c.Type.Event){if(l.event.special[n.name]||(l.event.special[n.name]={}),!l.event.special[n.name].owl){var e=l.event.special[n.name]._default;l.event.special[n.name]._default=function(t){return!e||!e.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&-1<t.namespace.indexOf("owl"):e.apply(this,arguments)},l.event.special[n.name].owl=!0}}else n.type===c.Type.State&&(this._states.tags[n.name]?this._states.tags[n.name]=this._states.tags[n.name].concat(n.tags):this._states.tags[n.name]=n.tags,this._states.tags[n.name]=l.grep(this._states.tags[n.name],l.proxy(function(t,e){return l.inArray(t,this._states.tags[n.name])===e},this)))},c.prototype.suppress=function(t){l.each(t,l.proxy(function(t,e){this._supress[e]=!0},this))},c.prototype.release=function(t){l.each(t,l.proxy(function(t,e){delete this._supress[e]},this))},c.prototype.pointer=function(t){var e={x:null,y:null};return(t=(t=t.originalEvent||t||n.event).touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t).pageX?(e.x=t.pageX,e.y=t.pageY):(e.x=t.clientX,e.y=t.clientY),e},c.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},c.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},l.fn.owlCarousel=function(e){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var t=l(this),n=t.data("owl.carousel");n||(n=new c(this,"object"==typeof e&&e),t.data("owl.carousel",n),l.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(t,e){n.register({type:c.Type.Event,name:e}),n.$element.on(e+".owl.carousel.core",l.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([e]),n[e].apply(this,[].slice.call(arguments,1)),this.release([e]))},n))})),"string"==typeof e&&"_"!==e.charAt(0)&&n[e].apply(n,i)})},l.fn.owlCarousel.Constructor=c}(window.Zepto||window.jQuery,window,document),function(e,n,t,i){var r=function(t){this._core=t,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":e.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoRefresh:!0,autoRefreshInterval:500},r.prototype.watch=function(){this._interval||(this._visible=this._core.isVisible(),this._interval=n.setInterval(e.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},r.prototype.refresh=function(){this._core.isVisible()!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},r.prototype.destroy=function(){var t,e;for(t in n.clearInterval(this._interval),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},e.fn.owlCarousel.Constructor.Plugins.AutoRefresh=r}(window.Zepto||window.jQuery,window,document),function(a,o,t,e){var n=function(t){this._core=t,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":a.proxy(function(t){if(t.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(t.property&&"position"==t.property.name||"initialized"==t.type)){var e=this._core.settings,n=e.center&&Math.ceil(e.items/2)||e.items,i=e.center&&-1*n||0,r=(t.property&&void 0!==t.property.value?t.property.value:this._core.current())+i,o=this._core.clones().length,s=a.proxy(function(t,e){this.load(e)},this);for(0<e.lazyLoadEager&&(n+=e.lazyLoadEager,e.loop&&(r-=e.lazyLoadEager,n++));i++<n;)this.load(o/2+this._core.relative(r)),o&&a.each(this._core.clones(this._core.relative(r)),s),r++}},this)},this._core.options=a.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={lazyLoad:!1,lazyLoadEager:0},n.prototype.load=function(t){var e=this._core.$stage.children().eq(t),n=e&&e.find(".owl-lazy");!n||-1<a.inArray(e.get(0),this._loaded)||(n.each(a.proxy(function(t,e){var n,i=a(e),r=1<o.devicePixelRatio&&i.attr("data-src-retina")||i.attr("data-src")||i.attr("data-srcset");this._core.trigger("load",{element:i,url:r},"lazy"),i.is("img")?i.one("load.owl.lazy",a.proxy(function(){i.css("opacity",1),this._core.trigger("loaded",{element:i,url:r},"lazy")},this)).attr("src",r):i.is("source")?i.one("load.owl.lazy",a.proxy(function(){this._core.trigger("loaded",{element:i,url:r},"lazy")},this)).attr("srcset",r):((n=new Image).onload=a.proxy(function(){i.css({"background-image":'url("'+r+'")',opacity:"1"}),this._core.trigger("loaded",{element:i,url:r},"lazy")},this),n.src=r)},this)),this._loaded.push(e.get(0)))},n.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},a.fn.owlCarousel.Constructor.Plugins.Lazy=n}(window.Zepto||window.jQuery,window,document),function(s,n,t,e){var i=function(t){this._core=t,this._previousHeight=null,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":s.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":s.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"===t.property.name&&this.update()},this),"loaded.owl.lazy":s.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=s.extend({},i.Defaults,this._core.options),this._core.$element.on(this._handlers),this._intervalId=null;var e=this;s(n).on("load",function(){e._core.settings.autoHeight&&e.update()}),s(n).resize(function(){e._core.settings.autoHeight&&(null!=e._intervalId&&clearTimeout(e._intervalId),e._intervalId=setTimeout(function(){e.update()},250))})};i.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},i.prototype.update=function(){var t=this._core._current,e=t+this._core.settings.items,n=this._core.settings.lazyLoad,i=this._core.$stage.children().toArray().slice(t,e),r=[],o=0;s.each(i,function(t,e){r.push(s(e).height())}),(o=Math.max.apply(null,r))<=1&&n&&this._previousHeight&&(o=this._previousHeight),this._previousHeight=o,this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},i.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},s.fn.owlCarousel.Constructor.Plugins.AutoHeight=i}(window.Zepto||window.jQuery,window,document),function(u,t,e,n){var i=function(t){this._core=t,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":u.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":u.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":u.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":u.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":u.proxy(function(t){if(t.namespace){var e=u(t.content).find(".owl-video");e.length&&(e.css("display","none"),this.fetch(e,u(t.content)))}},this)},this._core.options=u.extend({},i.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",u.proxy(function(t){this.play(t)},this))};i.Defaults={video:!1,videoHeight:!1,videoWidth:!1},i.prototype.fetch=function(t,e){var n=t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube",i=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),r=t.attr("data-width")||this._core.settings.videoWidth,o=t.attr("data-height")||this._core.settings.videoHeight,s=t.attr("href");if(!s)throw new Error("Missing video URL.");if(-1<(i=s.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu"))n="youtube";else if(-1<i[3].indexOf("vimeo"))n="vimeo";else{if(!(-1<i[3].indexOf("vzaar")))throw new Error("Video URL not supported.");n="vzaar"}i=i[6],this._videos[s]={type:n,id:i,width:r,height:o},e.attr("data-video",s),this.thumbnail(t,this._videos[s])},i.prototype.thumbnail=function(e,t){var n,i,r=t.width&&t.height?"width:"+t.width+"px;height:"+t.height+"px;":"",o=e.find("img"),s="src",a="",l=this._core.settings,c=function(t){'<div class="owl-video-play-icon"></div>',n=l.lazyLoad?u("<div/>",{class:"owl-video-tn "+a,srcType:t}):u("<div/>",{class:"owl-video-tn",style:"opacity:1;background-image:url("+t+")"}),e.after(n),e.after('<div class="owl-video-play-icon"></div>')};if(e.wrap(u("<div/>",{class:"owl-video-wrapper",style:r})),this._core.settings.lazyLoad&&(s="data-src",a="owl-lazy"),o.length)return c(o.attr(s)),o.remove(),!1;"youtube"===t.type?(i="//img.youtube.com/vi/"+t.id+"/hqdefault.jpg",c(i)):"vimeo"===t.type?u.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+t.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){i=t[0].thumbnail_large,c(i)}}):"vzaar"===t.type&&u.ajax({type:"GET",url:"//vzaar.com/api/videos/"+t.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){i=t.framegrab_url,c(i)}})},i.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},i.prototype.play=function(t){var e,n=u(t.target).closest("."+this._core.settings.itemClass),i=this._videos[n.attr("data-video")],r=i.width||"100%",o=i.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),n=this._core.items(this._core.relative(n.index())),this._core.reset(n.index()),(e=u('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>')).attr("height",o),e.attr("width",r),"youtube"===i.type?e.attr("src","//www.youtube.com/embed/"+i.id+"?autoplay=1&rel=0&v="+i.id):"vimeo"===i.type?e.attr("src","//player.vimeo.com/video/"+i.id+"?autoplay=1"):"vzaar"===i.type&&e.attr("src","//view.vzaar.com/"+i.id+"/player?autoplay=true"),u(e).wrap('<div class="owl-video-frame" />').insertAfter(n.find(".owl-video")),this._playing=n.addClass("owl-video-playing"))},i.prototype.isInFullScreen=function(){var t=e.fullscreenElement||e.mozFullScreenElement||e.webkitFullscreenElement;return t&&u(t).parent().hasClass("owl-video-frame")},i.prototype.destroy=function(){var t,e;for(t in this._core.$element.off("click.owl.video"),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},u.fn.owlCarousel.Constructor.Plugins.Video=i}(window.Zepto||window.jQuery,window,document),function(s,t,e,n){var i=function(t){this.core=t,this.core.options=s.extend({},i.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":s.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":s.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":s.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};i.Defaults={animateOut:!1,animateIn:!1},i.prototype.swap=function(){if(1===this.core.settings.items&&s.support.animation&&s.support.transition){this.core.speed(0);var t,e=s.proxy(this.clear,this),n=this.core.$stage.children().eq(this.previous),i=this.core.$stage.children().eq(this.next),r=this.core.settings.animateIn,o=this.core.settings.animateOut;this.core.current()!==this.previous&&(o&&(t=this.core.coordinates(this.previous)-this.core.coordinates(this.next),n.one(s.support.animation.end,e).css({left:t+"px"}).addClass("animated owl-animated-out").addClass(o)),r&&i.one(s.support.animation.end,e).addClass("animated owl-animated-in").addClass(r))}},i.prototype.clear=function(t){s(t.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},i.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},s.fn.owlCarousel.Constructor.Plugins.Animate=i}(window.Zepto||window.jQuery,window,document),function(i,r,e,t){var n=function(t){this._core=t,this._call=null,this._time=0,this._timeout=0,this._paused=!0,this._handlers={"changed.owl.carousel":i.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._paused&&(this._time=0)},this),"initialized.owl.carousel":i.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":i.proxy(function(t,e,n){t.namespace&&this.play(e,n)},this),"stop.owl.autoplay":i.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":i.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":i.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":i.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":i.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=i.extend({},n.Defaults,this._core.options)};n.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},n.prototype._next=function(t){this._call=r.setTimeout(i.proxy(this._next,this,t),this._timeout*(Math.round(this.read()/this._timeout)+1)-this.read()),this._core.is("interacting")||e.hidden||this._core.next(t||this._core.settings.autoplaySpeed)},n.prototype.read=function(){return(new Date).getTime()-this._time},n.prototype.play=function(t,e){var n;this._core.is("rotating")||this._core.enter("rotating"),t=t||this._core.settings.autoplayTimeout,n=Math.min(this._time%(this._timeout||t),t),this._paused?(this._time=this.read(),this._paused=!1):r.clearTimeout(this._call),this._time+=this.read()%t-n,this._timeout=t,this._call=r.setTimeout(i.proxy(this._next,this,e),t-n)},n.prototype.stop=function(){this._core.is("rotating")&&(this._time=0,this._paused=!0,r.clearTimeout(this._call),this._core.leave("rotating"))},n.prototype.pause=function(){this._core.is("rotating")&&!this._paused&&(this._time=this.read(),this._paused=!0,r.clearTimeout(this._call))},n.prototype.destroy=function(){var t,e;for(t in this.stop(),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},i.fn.owlCarousel.Constructor.Plugins.autoplay=n}(window.Zepto||window.jQuery,window,document),function(o,t,e,n){"use strict";var i=function(t){this._core=t,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":o.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+o(t.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":o.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":o.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":o.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":o.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":o.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=o.extend({},i.Defaults,this._core.options),this.$element.on(this._handlers)};i.Defaults={nav:!1,navText:['<span aria-label="Previous">&#x2039;</span>','<span aria-label="Next">&#x203a;</span>'],navSpeed:!1,navElement:'button type="button" role="presentation"',navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},i.prototype.initialize=function(){var t,n=this._core.settings;for(t in this._controls.$relative=(n.navContainer?o(n.navContainer):o("<div>").addClass(n.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=o("<"+n.navElement+">").addClass(n.navClass[0]).html(n.navText[0]).prependTo(this._controls.$relative).on("click",o.proxy(function(t){this.prev(n.navSpeed)},this)),this._controls.$next=o("<"+n.navElement+">").addClass(n.navClass[1]).html(n.navText[1]).appendTo(this._controls.$relative).on("click",o.proxy(function(t){this.next(n.navSpeed)},this)),n.dotsData||(this._templates=[o('<button role="button">').addClass(n.dotClass).append(o("<span>")).prop("outerHTML")]),this._controls.$absolute=(n.dotsContainer?o(n.dotsContainer):o("<div>").addClass(n.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","button",o.proxy(function(t){var e=o(t.target).parent().is(this._controls.$absolute)?o(t.target).index():o(t.target).parent().index();t.preventDefault(),this.to(e,n.dotsSpeed)},this)),this._overrides)this._core[t]=o.proxy(this[t],this)},i.prototype.destroy=function(){var t,e,n,i,r;for(t in r=this._core.settings,this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)"$relative"===e&&r.navContainer?this._controls[e].html(""):this._controls[e].remove();for(i in this.overides)this._core[i]=this._overrides[i];for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},i.prototype.update=function(){var t,e,n=this._core.clones().length/2,i=n+this._core.items().length,r=this._core.maximum(!0),o=this._core.settings,s=o.center||o.autoWidth||o.dotsData?1:o.dotsEach||o.items;if("page"!==o.slideBy&&(o.slideBy=Math.min(o.slideBy,o.items)),o.dots||"page"==o.slideBy)for(this._pages=[],t=n,e=0;t<i;t++){if(s<=e||0===e){if(this._pages.push({start:Math.min(r,t-n),end:t-n+s-1}),Math.min(r,t-n)===r)break;e=0,0}e+=this._core.mergers(this._core.relative(t))}},i.prototype.draw=function(){var t,e=this._core.settings,n=this._core.items().length<=e.items,i=this._core.relative(this._core.current()),r=e.loop||e.rewind;this._controls.$relative.toggleClass("disabled",!e.nav||n),e.nav&&(this._controls.$previous.toggleClass("disabled",!r&&i<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!r&&i>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!e.dots||n),e.dots&&(t=this._pages.length-this._controls.$absolute.children().length,e.dotsData&&0!==t?this._controls.$absolute.html(this._templates.join("")):0<t?this._controls.$absolute.append(new Array(t+1).join(this._templates[0])):t<0&&this._controls.$absolute.children().slice(t).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(o.inArray(this.current(),this._pages)).addClass("active"))},i.prototype.onTrigger=function(t){var e=this._core.settings;t.page={index:o.inArray(this.current(),this._pages),count:this._pages.length,size:e&&(e.center||e.autoWidth||e.dotsData?1:e.dotsEach||e.items)}},i.prototype.current=function(){var n=this._core.relative(this._core.current());return o.grep(this._pages,o.proxy(function(t,e){return t.start<=n&&t.end>=n},this)).pop()},i.prototype.getPosition=function(t){var e,n,i=this._core.settings;return"page"==i.slideBy?(e=o.inArray(this.current(),this._pages),n=this._pages.length,t?++e:--e,e=this._pages[(e%n+n)%n].start):(e=this._core.relative(this._core.current()),n=this._core.items().length,t?e+=i.slideBy:e-=i.slideBy),e},i.prototype.next=function(t){o.proxy(this._overrides.to,this._core)(this.getPosition(!0),t)},i.prototype.prev=function(t){o.proxy(this._overrides.to,this._core)(this.getPosition(!1),t)},i.prototype.to=function(t,e,n){var i;!n&&this._pages.length?(i=this._pages.length,o.proxy(this._overrides.to,this._core)(this._pages[(t%i+i)%i].start,e)):o.proxy(this._overrides.to,this._core)(t,e)},o.fn.owlCarousel.Constructor.Plugins.Navigation=i}(window.Zepto||window.jQuery,window,document),function(i,r,t,e){"use strict";var n=function(t){this._core=t,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":i.proxy(function(t){t.namespace&&"URLHash"===this._core.settings.startPosition&&i(r).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":i.proxy(function(t){if(t.namespace){var e=i(t.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!e)return;this._hashes[e]=t.content}},this),"changed.owl.carousel":i.proxy(function(t){if(t.namespace&&"position"===t.property.name){var n=this._core.items(this._core.relative(this._core.current())),e=i.map(this._hashes,function(t,e){return t===n?e:null}).join();if(!e||r.location.hash.slice(1)===e)return;r.location.hash=e}},this)},this._core.options=i.extend({},n.Defaults,this._core.options),this.$element.on(this._handlers),i(r).on("hashchange.owl.navigation",i.proxy(function(t){var e=r.location.hash.substring(1),n=this._core.$stage.children(),i=this._hashes[e]&&n.index(this._hashes[e]);void 0!==i&&i!==this._core.current()&&this._core.to(this._core.relative(i),!1,!0)},this))};n.Defaults={URLhashListener:!1},n.prototype.destroy=function(){var t,e;for(t in i(r).off("hashchange.owl.navigation"),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},i.fn.owlCarousel.Constructor.Plugins.Hash=n}(window.Zepto||window.jQuery,window,document),function(r,t,e,o){function n(t,n){var i=!1,e=t.charAt(0).toUpperCase()+t.slice(1);return r.each((t+" "+a.join(e+" ")+e).split(" "),function(t,e){if(s[e]!==o)return i=!n||e,!1}),i}function i(t){return n(t,!0)}var s=r("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},c=function(){return!!n("transform")},u=function(){return!!n("perspective")},h=function(){return!!n("animation")};(function(){return!!n("transition")})()&&(r.support.transition=new String(i("transition")),r.support.transition.end=l.transition.end[r.support.transition]),h()&&(r.support.animation=new String(i("animation")),r.support.animation.end=l.animation.end[r.support.animation]),c()&&(r.support.transform=new String(i("transform")),r.support.transform3d=u())}(window.Zepto||window.jQuery,window,document),$(document).ready(function(){$(".specialists__slider").owlCarousel({loop:!1,nav:!0,dots:!1,responsiveClass:!0,responsive:{0:{items:1,nav:!1},600:{items:3,nav:!1},1e3:{items:5,nav:!0,loop:!1}}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
